[{
	"inScope" : true,
	"issueBackground" : "<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>\n<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>",
	"host" : "foo.com",
	"remediationBackground" : "<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>",
	"requestResponses" : [
		{
			"response" : {
				"mimeType" : "text",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Content-Type" : "text/plain",
					"Connection" : "close",
					"Server" : "Apache/2.4.7 (Ubuntu)",
					"Accept-Ranges" : "bytes",
					"Last-Modified" : "Mon, 05 Oct 2015 07:51:07 GMT",
					"Date" : "Wed, 08 Jun 2016 16:13:54 GMT",
					"Content-Length" : "26",
					"ETag" : ""
				},
				"messageType" : "response",
				"port" : 80,
				"statusCode" : 200,
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			},
			"messageType" : "requestResponse",
			"request" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http",
				"path" : "/robots.txt",
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"url" : "http://foo.com:80/robots.txt",
				"referenceID" : 0,
				"toolFlag" : 16962
			}
		}
	],
	"issueType" : 6292992,
	"protocol" : "http",
	"confidence" : "Certain",
	"severity" : "Information",
	"port" : 80,
	"messageType" : "scanIssue",
	"name" : "Robots.txt file",
	"url" : "http://foo.com:80/robots.txt",
	"issueDetail" : "The web server contains a robots.txt file."
},
{
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"statusCode" : 200,
				"body" : "",
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"headers" : {
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "891",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:14:18 GMT"
				},
				"cookies" : [],
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML"
			},
			"request" : {
				"protocol" : "http",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"path" : "/",
				"url" : "http://foo.com:80/",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : ""
			}
		}
	],
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/",
	"confidence" : "Firm",
	"severity" : "Information",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 5245344,
	"protocol" : "http"
},
{
	"protocol" : "http",
	"issueType" : 8389120,
	"messageType" : "scanIssue",
	"port" : 80,
	"severity" : "Information",
	"confidence" : "Certain",
	"url" : "http://foo.com:80/",
	"name" : "HTML does not specify charset",
	"issueBackground" : "<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\n<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>",
	"inScope" : true,
	"host" : "foo.com",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"headers" : {
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:14:18 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "891"
				},
				"cookies" : [],
				"port" : 80,
				"messageType" : "response",
				"statusCode" : 200,
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com"
			},
			"request" : {
				"path" : "/",
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"body" : "",
				"httpVersion" : "HTTP/1.1"
			}
		}
	],
	"remediationBackground" : "<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\n</p>"
},
{
	"remediationBackground" : "<p>The TRACE method should be disabled on production web servers.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"protocol" : "http",
				"headers" : {
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:14:18 GMT",
					"Connection" : "close",
					"Content-Type" : "message/http",
					"Content-Length" : "138"
				},
				"cookies" : [],
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"statusCode" : 200,
				"body" : ""
			},
			"request" : {
				"url" : "http://foo.com:80/",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"headers" : {
					"Host" : "foo.com",
					"Connection" : "close",
					"Cookie" : "d98f2553c2"
				},
				"protocol" : "http",
				"path" : "/",
				"messageType" : "request",
				"method" : "TRACE",
				"port" : 80,
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : ""
			}
		}
	],
	"inScope" : true,
	"issueBackground" : "<p>The HTTP TRACE  method is designed for diagnostic purposes. If enabled, the web server will respond to requests that use the TRACE method by echoing in its response the exact request that was received.</p>\n<p>This behavior is often harmless, but occasionally leads to the disclosure of sensitive information such as internal authentication headers appended by reverse proxies. This functionality could historically be used to bypass the HttpOnly cookie flag on cookies, but this is no longer possible in modern web browsers. </p>",
	"host" : "foo.com",
	"url" : "http://foo.com:80/",
	"name" : "HTTP TRACE method is enabled",
	"messageType" : "scanIssue",
	"port" : 80,
	"severity" : "Information",
	"confidence" : "Certain",
	"protocol" : "http",
	"issueType" : 5245440
},
{
	"requestResponses" : [
		{
			"request" : {
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http",
				"path" : "/dav/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"url" : "http://foo.com:80/dav/",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : ""
			},
			"messageType" : "requestResponse",
			"response" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : "",
				"protocol" : "http",
				"headers" : {
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Date" : "Wed, 08 Jun 2016 16:14:18 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Length" : "28725"
				},
				"cookies" : [],
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962
			}
		}
	],
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"inScope" : true,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"host" : "foo.com",
	"port" : 80,
	"messageType" : "scanIssue",
	"confidence" : "Firm",
	"severity" : "Information",
	"protocol" : "http",
	"issueType" : 5245344,
	"url" : "http://foo.com:80/dav/",
	"name" : "Frameable response (potential Clickjacking)"
},
{
	"url" : "http://foo.com:80/dav/",
	"name" : "Directory listing",
	"protocol" : "http",
	"issueType" : 6291712,
	"port" : 80,
	"messageType" : "scanIssue",
	"confidence" : "Firm",
	"severity" : "Information",
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
	"requestResponses" : [
		{
			"request" : {
				"path" : "/dav/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/dav/",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1"
			},
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"headers" : {
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Date" : "Wed, 08 Jun 2016 16:14:18 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Length" : "28725"
				},
				"cookies" : []
			},
			"messageType" : "requestResponse"
		}
	],
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>"
},
{
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"response" : {
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"headers" : {
					"Content-Length" : "15681",
					"Date" : "Wed, 08 Jun 2016 16:30:00 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8"
				},
				"cookies" : [],
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"statusCode" : 200,
				"body" : ""
			},
			"messageType" : "requestResponse",
			"request" : {
				"url" : "http://foo.com:80/dav/0clOfaeR.htm/?C=S;O=A",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"query" : "C=S;O=A",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"path" : "/dav/0clOfaeR.htm/",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com"
			}
		}
	],
	"inScope" : true,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"host" : "foo.com",
	"url" : "http://foo.com:80/dav/0clOfaeR.htm/",
	"name" : "Frameable response (potential Clickjacking)",
	"messageType" : "scanIssue",
	"port" : 80,
	"severity" : "Information",
	"confidence" : "Firm",
	"protocol" : "http",
	"issueType" : 5245344
},
{
	"protocol" : "http",
	"issueType" : 6291712,
	"messageType" : "scanIssue",
	"port" : 80,
	"severity" : "Information",
	"confidence" : "Firm",
	"url" : "http://foo.com:80/dav/0clOfaeR.htm/",
	"name" : "Directory listing",
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
	"inScope" : true,
	"host" : "foo.com",
	"requestResponses" : [
		{
			"response" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200,
				"port" : 80,
				"messageType" : "response",
				"headers" : {
					"Content-Length" : "15681",
					"Content-Type" : "text/html;charset=UTF-8",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:30:00 GMT"
				},
				"cookies" : [],
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML"
			},
			"messageType" : "requestResponse",
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/dav/0clOfaeR.htm/?C=S;O=A",
				"path" : "/dav/0clOfaeR.htm/",
				"messageType" : "request",
				"query" : "C=S;O=A",
				"method" : "GET",
				"port" : 80,
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http"
			}
		}
	],
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>"
},
{
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:14:54 GMT",
					"Content-Length" : "2961"
				},
				"port" : 80,
				"messageType" : "response"
			},
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"url" : "http://foo.com:80/dav/0clOfaeR.htm/BqDfdTk6.htm/",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http",
				"path" : "/dav/0clOfaeR.htm/BqDfdTk6.htm/",
				"port" : 80,
				"messageType" : "request",
				"method" : "GET"
			}
		}
	],
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"inScope" : true,
	"host" : "foo.com",
	"url" : "http://foo.com:80/dav/0clOfaeR.htm/BqDfdTk6.htm/",
	"name" : "Frameable response (potential Clickjacking)",
	"port" : 80,
	"messageType" : "scanIssue",
	"severity" : "Information",
	"confidence" : "Firm",
	"protocol" : "http",
	"issueType" : 5245344
},
{
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"statusCode" : 200,
				"port" : 80,
				"messageType" : "response",
				"cookies" : [],
				"headers" : {
					"Content-Length" : "2961",
					"Date" : "Wed, 08 Jun 2016 16:14:54 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html;charset=UTF-8",
					"Connection" : "close"
				},
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML"
			},
			"request" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"protocol" : "http",
				"path" : "/dav/0clOfaeR.htm/BqDfdTk6.htm/",
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"url" : "http://foo.com:80/dav/0clOfaeR.htm/BqDfdTk6.htm/",
				"referenceID" : 0,
				"toolFlag" : 16962
			}
		}
	],
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
	"severity" : "Information",
	"confidence" : "Firm",
	"port" : 80,
	"messageType" : "scanIssue",
	"issueType" : 6291712,
	"protocol" : "http",
	"name" : "Directory listing",
	"url" : "http://foo.com:80/dav/0clOfaeR.htm/BqDfdTk6.htm/"
},
{
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"request" : {
				"path" : "/dav/8YHe9HxL.htm/RbvHXhHy.htm/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/dav/8YHe9HxL.htm/RbvHXhHy.htm/",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1"
			},
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:19:06 GMT",
					"Content-Type" : "text/html;charset=UTF-8",
					"Connection" : "close",
					"Content-Length" : "2016"
				}
			},
			"messageType" : "requestResponse"
		}
	],
	"inScope" : true,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"host" : "foo.com",
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/dav/8YHe9HxL.htm/RbvHXhHy.htm/",
	"confidence" : "Firm",
	"severity" : "Information",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 5245344,
	"protocol" : "http"
},
{
	"requestResponses" : [
		{
			"request" : {
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http",
				"path" : "/dav/8YHe9HxL.htm/RbvHXhHy.htm/",
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"url" : "http://foo.com:80/dav/8YHe9HxL.htm/RbvHXhHy.htm/",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : ""
			},
			"messageType" : "requestResponse",
			"response" : {
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"headers" : {
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Date" : "Wed, 08 Jun 2016 16:19:06 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Length" : "2016"
				},
				"cookies" : [],
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"statusCode" : 200,
				"body" : ""
			}
		}
	],
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",
	"inScope" : true,
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
	"host" : "foo.com",
	"messageType" : "scanIssue",
	"port" : 80,
	"severity" : "Information",
	"confidence" : "Firm",
	"protocol" : "http",
	"issueType" : 6291712,
	"url" : "http://foo.com:80/dav/8YHe9HxL.htm/RbvHXhHy.htm/",
	"name" : "Directory listing"
},
{
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"request" : {
				"path" : "/dav/8YHe9HxL.htm/TmRtZpfm.htm/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/dav/8YHe9HxL.htm/TmRtZpfm.htm/",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"httpVersion" : "HTTP/1.1"
			},
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:15:19 GMT",
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Content-Length" : "2016"
				},
				"port" : 80,
				"messageType" : "response"
			}
		}
	],
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/dav/8YHe9HxL.htm/TmRtZpfm.htm/",
	"issueType" : 5245344,
	"protocol" : "http",
	"severity" : "Information",
	"confidence" : "Firm",
	"port" : 80,
	"messageType" : "scanIssue"
},
{
	"requestResponses" : [
		{
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"url" : "http://foo.com:80/dav/8YHe9HxL.htm/TmRtZpfm.htm/",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"path" : "/dav/8YHe9HxL.htm/TmRtZpfm.htm/"
			},
			"response" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"statusCode" : 200,
				"body" : "",
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Date" : "Wed, 08 Jun 2016 16:15:19 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Content-Length" : "2016"
				},
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML"
			},
			"messageType" : "requestResponse"
		}
	],
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",
	"inScope" : true,
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
	"host" : "foo.com",
	"messageType" : "scanIssue",
	"port" : 80,
	"confidence" : "Firm",
	"severity" : "Information",
	"protocol" : "http",
	"issueType" : 6291712,
	"url" : "http://foo.com:80/dav/8YHe9HxL.htm/TmRtZpfm.htm/",
	"name" : "Directory listing"
},
{
	"issueType" : 5245344,
	"protocol" : "http",
	"severity" : "Information",
	"confidence" : "Firm",
	"port" : 80,
	"messageType" : "scanIssue",
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/dav/8YHe9HxL.htm/eo3l4kJB.htm/",
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"requestResponses" : [
		{
			"request" : {
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"path" : "/dav/8YHe9HxL.htm/eo3l4kJB.htm/",
				"url" : "http://foo.com:80/dav/8YHe9HxL.htm/eo3l4kJB.htm/",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : ""
			},
			"response" : {
				"headers" : {
					"Content-Type" : "text/html;charset=UTF-8",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:37:17 GMT",
					"Content-Length" : "1824"
				},
				"cookies" : [],
				"protocol" : "http",
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200
			},
			"messageType" : "requestResponse"
		}
	],
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>"
},
{
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
	"requestResponses" : [
		{
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/dav/8YHe9HxL.htm/eo3l4kJB.htm/",
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"path" : "/dav/8YHe9HxL.htm/eo3l4kJB.htm/",
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				}
			},
			"response" : {
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"cookies" : [],
				"headers" : {
					"Content-Length" : "1824",
					"Date" : "Wed, 08 Jun 2016 16:37:17 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8"
				},
				"protocol" : "http",
				"port" : 80,
				"messageType" : "response",
				"body" : "",
				"statusCode" : 200,
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com"
			},
			"messageType" : "requestResponse"
		}
	],
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",
	"protocol" : "http",
	"issueType" : 6291712,
	"messageType" : "scanIssue",
	"port" : 80,
	"severity" : "Information",
	"confidence" : "Firm",
	"url" : "http://foo.com:80/dav/8YHe9HxL.htm/eo3l4kJB.htm/",
	"name" : "Directory listing"
},
{
	"confidence" : "Firm",
	"severity" : "Information",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 5245344,
	"protocol" : "http",
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/dav/8YHe9HxL.htm/p8GsRcKS.htm/",
	"requestResponses" : [
		{
			"response" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"body" : "",
				"statusCode" : 200,
				"messageType" : "response",
				"port" : 80,
				"headers" : {
					"Content-Length" : "1824",
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:35:36 GMT"
				},
				"cookies" : [],
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML"
			},
			"messageType" : "requestResponse",
			"request" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"protocol" : "http",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"path" : "/dav/8YHe9HxL.htm/p8GsRcKS.htm/",
				"url" : "http://foo.com:80/dav/8YHe9HxL.htm/p8GsRcKS.htm/",
				"toolFlag" : 16962,
				"referenceID" : 0
			}
		}
	],
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"inScope" : true,
	"host" : "foo.com"
},
{
	"url" : "http://foo.com:80/dav/8YHe9HxL.htm/p8GsRcKS.htm/",
	"name" : "Directory listing",
	"protocol" : "http",
	"issueType" : 6291712,
	"port" : 80,
	"messageType" : "scanIssue",
	"confidence" : "Firm",
	"severity" : "Information",
	"inScope" : true,
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
	"host" : "foo.com",
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"headers" : {
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:35:36 GMT",
					"Content-Length" : "1824"
				},
				"cookies" : []
			},
			"request" : {
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/dav/8YHe9HxL.htm/p8GsRcKS.htm/",
				"path" : "/dav/8YHe9HxL.htm/p8GsRcKS.htm/",
				"port" : 80,
				"messageType" : "request",
				"method" : "GET",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"protocol" : "http",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : ""
			}
		}
	]
},
{
	"protocol" : "http",
	"issueType" : 5245344,
	"messageType" : "scanIssue",
	"port" : 80,
	"severity" : "Information",
	"confidence" : "Firm",
	"url" : "http://foo.com:80/dav/8YHe9HxL.htm/ttuSCgPs.htm/",
	"name" : "Frameable response (potential Clickjacking)",
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"inScope" : true,
	"host" : "foo.com",
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"request" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"path" : "/dav/8YHe9HxL.htm/ttuSCgPs.htm/",
				"url" : "http://foo.com:80/dav/8YHe9HxL.htm/ttuSCgPs.htm/",
				"referenceID" : 0,
				"toolFlag" : 16962
			},
			"response" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"statusCode" : 200,
				"headers" : {
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Date" : "Wed, 08 Jun 2016 16:28:57 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Length" : "1824"
				},
				"cookies" : [],
				"protocol" : "http",
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962
			},
			"messageType" : "requestResponse"
		}
	]
},
{
	"port" : 80,
	"messageType" : "scanIssue",
	"confidence" : "Firm",
	"severity" : "Information",
	"protocol" : "http",
	"issueType" : 6291712,
	"url" : "http://foo.com:80/dav/8YHe9HxL.htm/ttuSCgPs.htm/",
	"name" : "Directory listing",
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",
	"requestResponses" : [
		{
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:28:57 GMT",
					"Content-Length" : "1824"
				},
				"messageType" : "response",
				"port" : 80
			},
			"messageType" : "requestResponse",
			"request" : {
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/dav/8YHe9HxL.htm/ttuSCgPs.htm/",
				"port" : 80,
				"messageType" : "request",
				"method" : "GET",
				"path" : "/dav/8YHe9HxL.htm/ttuSCgPs.htm/",
				"protocol" : "http",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : ""
			}
		}
	],
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>"
},
{
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"response" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200,
				"headers" : {
					"Content-Length" : "14175",
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:17:46 GMT"
				},
				"cookies" : [],
				"protocol" : "http",
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962
			},
			"messageType" : "requestResponse",
			"request" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"headers" : {
					"Referer" : "http://foo.com/dav/",
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"Cookie" : "security=high; PHPSESSID=249765abfd585ca77e86618061301bcb",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"protocol" : "http",
				"path" : "/dav/8ff8YG1S.htm/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"url" : "http://foo.com:80/dav/8ff8YG1S.htm/",
				"toolFlag" : 16962,
				"referenceID" : 0
			}
		}
	],
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"inScope" : true,
	"host" : "foo.com",
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/dav/8ff8YG1S.htm/",
	"confidence" : "Firm",
	"severity" : "Information",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 5245344,
	"protocol" : "http"
},
{
	"name" : "Directory listing",
	"url" : "http://foo.com:80/dav/8ff8YG1S.htm/",
	"issueType" : 6291712,
	"protocol" : "http",
	"severity" : "Information",
	"confidence" : "Firm",
	"port" : 80,
	"messageType" : "scanIssue",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",
	"requestResponses" : [
		{
			"request" : {
				"path" : "/dav/8ff8YG1S.htm/",
				"port" : 80,
				"messageType" : "request",
				"method" : "GET",
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Cookie" : "security=high; PHPSESSID=249765abfd585ca77e86618061301bcb",
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"Referer" : "http://foo.com/dav/"
				},
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/dav/8ff8YG1S.htm/",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"httpVersion" : "HTTP/1.1"
			},
			"response" : {
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"headers" : {
					"Content-Type" : "text/html;charset=UTF-8",
					"Connection" : "close",
					"Date" : "Wed, 08 Jun 2016 16:17:46 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Length" : "14175"
				},
				"cookies" : [],
				"messageType" : "response",
				"port" : 80,
				"statusCode" : 200,
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com"
			},
			"messageType" : "requestResponse"
		}
	]
},
{
	"url" : "http://foo.com:80/dav/LOTEHeD5.htm/",
	"name" : "Frameable response (potential Clickjacking)",
	"protocol" : "http",
	"issueType" : 5245344,
	"messageType" : "scanIssue",
	"port" : 80,
	"confidence" : "Firm",
	"severity" : "Information",
	"inScope" : true,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"host" : "foo.com",
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"request" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"protocol" : "http",
				"path" : "/dav/LOTEHeD5.htm/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"url" : "http://foo.com:80/dav/LOTEHeD5.htm/",
				"referenceID" : 0,
				"toolFlag" : 16962
			},
			"messageType" : "requestResponse",
			"response" : {
				"body" : "",
				"statusCode" : 200,
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"port" : 80,
				"messageType" : "response",
				"headers" : {
					"Content-Length" : "14352",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:35:39 GMT",
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8"
				},
				"cookies" : [],
				"protocol" : "http"
			}
		}
	]
},
{
	"url" : "http://foo.com:80/dav/LOTEHeD5.htm/",
	"name" : "Directory listing",
	"protocol" : "http",
	"issueType" : 6291712,
	"port" : 80,
	"messageType" : "scanIssue",
	"confidence" : "Firm",
	"severity" : "Information",
	"inScope" : true,
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
	"host" : "foo.com",
	"requestResponses" : [
		{
			"request" : {
				"protocol" : "http",
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"path" : "/dav/LOTEHeD5.htm/",
				"url" : "http://foo.com:80/dav/LOTEHeD5.htm/",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : ""
			},
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Content-Length" : "14352",
					"Date" : "Wed, 08 Jun 2016 16:35:39 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8"
				}
			}
		}
	],
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>"
},
{
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/dav/awx0RAou.htm/",
	"issueType" : 5245344,
	"protocol" : "http",
	"severity" : "Information",
	"confidence" : "Firm",
	"port" : 80,
	"messageType" : "scanIssue",
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Content-Type" : "text/html;charset=UTF-8",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:18:14 GMT",
					"Content-Length" : "14175"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : ""
			},
			"request" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"protocol" : "http",
				"path" : "/dav/awx0RAou.htm/",
				"port" : 80,
				"messageType" : "request",
				"method" : "GET",
				"url" : "http://foo.com:80/dav/awx0RAou.htm/",
				"toolFlag" : 16962,
				"referenceID" : 0
			}
		}
	],
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>"
},
{
	"confidence" : "Firm",
	"severity" : "Information",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 6291712,
	"protocol" : "http",
	"name" : "Directory listing",
	"url" : "http://foo.com:80/dav/awx0RAou.htm/",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"headers" : {
					"Content-Length" : "14175",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:18:14 GMT",
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8"
				},
				"cookies" : [],
				"port" : 80,
				"messageType" : "response"
			},
			"request" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"path" : "/dav/awx0RAou.htm/",
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/dav/awx0RAou.htm/"
			}
		}
	],
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",
	"inScope" : true,
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
	"host" : "foo.com"
},
{
	"url" : "http://foo.com:80/icons/",
	"name" : "Frameable response (potential Clickjacking)",
	"port" : 80,
	"messageType" : "scanIssue",
	"severity" : "Information",
	"confidence" : "Firm",
	"protocol" : "http",
	"issueType" : 5245344,
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"request" : {
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/icons/?C=N;O=D",
				"path" : "/icons/",
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"query" : "C=N;O=D",
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com"
			},
			"response" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200,
				"headers" : {
					"Content-Length" : "69404",
					"Content-Type" : "text/html;charset=UTF-8",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:41:41 GMT"
				},
				"cookies" : [],
				"protocol" : "http",
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962
			},
			"messageType" : "requestResponse"
		}
	],
	"inScope" : true,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"host" : "foo.com"
},
{
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
	"remediationBackground" : "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties.</p>",
	"requestResponses" : [
		{
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"url" : "http://foo.com:80/icons/?C=N;O=D",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"query" : "C=N;O=D",
				"path" : "/icons/"
			},
			"messageType" : "requestResponse",
			"response" : {
				"body" : "",
				"statusCode" : 200,
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"messageType" : "response",
				"port" : 80,
				"cookies" : [],
				"headers" : {
					"Content-Length" : "69404",
					"Content-Type" : "text/html;charset=UTF-8",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:41:41 GMT"
				},
				"protocol" : "http"
			}
		}
	],
	"issueDetail" : "The page was loaded from a URL containing a query string:<ul><li>http://foo.com/icons/?C=N;O=D</li></ul>The response contains the following link to another domain:<ul><li>http://httpd.apache.org/docs-project/</li></ul>",
	"url" : "http://foo.com:80/icons/",
	"name" : "Cross-domain Referer leakage",
	"protocol" : "http",
	"issueType" : 5243904,
	"messageType" : "scanIssue",
	"port" : 80,
	"confidence" : "Certain",
	"severity" : "Information"
},
{
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200,
				"messageType" : "response",
				"port" : 80,
				"cookies" : [],
				"headers" : {
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Date" : "Wed, 08 Jun 2016 16:41:41 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Length" : "69404"
				},
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML"
			},
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/icons/?C=N;O=D",
				"messageType" : "request",
				"query" : "C=N;O=D",
				"port" : 80,
				"method" : "GET",
				"path" : "/icons/",
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				}
			}
		}
	],
	"remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	"protocol" : "http",
	"issueType" : 6291968,
	"port" : 80,
	"messageType" : "scanIssue",
	"severity" : "Information",
	"confidence" : "Certain",
	"issueDetail" : "The following email addresses were disclosed in the response:<ul><li>kevinh@kevcom.com</li><li>mike@hyperreal.org</li></ul>",
	"url" : "http://foo.com:80/icons/",
	"name" : "Email addresses disclosed"
},
{
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>",
	"remediationBackground" : "<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",
	"requestResponses" : [
		{
			"response" : {
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:41:41 GMT",
					"Connection" : "close",
					"Content-Type" : "text/html;charset=UTF-8",
					"Content-Length" : "69404"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : ""
			},
			"messageType" : "requestResponse",
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"url" : "http://foo.com:80/icons/?C=N;O=D",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"messageType" : "request",
				"method" : "GET",
				"query" : "C=N;O=D",
				"port" : 80,
				"path" : "/icons/"
			}
		}
	],
	"name" : "Directory listing",
	"url" : "http://foo.com:80/icons/",
	"issueType" : 6291712,
	"protocol" : "http",
	"confidence" : "Firm",
	"severity" : "Information",
	"port" : 80,
	"messageType" : "scanIssue"
},
{
	"messageType" : "scanIssue",
	"port" : 80,
	"severity" : "Low",
	"confidence" : "Certain",
	"protocol" : "http",
	"issueType" : 2097920,
	"url" : "http://foo.com:80/mutillidae",
	"issueDetail" : "The value of the <b>User-Agent</b> HTTP header is copied into the HTML document as plain text between tags. The payload <b>5a685&lt;script&gt;alert(1)&lt;/script&gt;49035</b> was submitted in the User-Agent HTTP header. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that a redirection occurred between the attack request and the response containing the echoed input. It is necessary to follow this redirection for the attack to succeed. When the attack is carried out via a browser, the redirection will be followed automatically.<br><br>Because the user data that is copied into the response is submitted within a request header, the application's behavior is not trivial to exploit in an attack against another user. In the past, methods have existed of using client-side technologies such as Flash to cause another user to make a request containing an arbitrary HTTP header. If you can use such a technique, you can probably leverage it to exploit the XSS flaw. This limitation partially mitigates the impact of the vulnerability.",
	"name" : "Cross-site scripting (reflected)",
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Content-Type" : "text/html",
					"Pragma" : "public",
					"Logged-In-User" : "",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "public",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:14:52 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:14:52 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "26130"
				},
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : ""
			},
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"url" : "http://foo.com:80/mutillidae",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)5a685<script>alert(1)</script>49035",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"protocol" : "http",
				"path" : "/mutillidae",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET"
			}
		}
	],
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"inScope" : true,
	"host" : "foo.com"
},
{
	"requestResponses" : [
		{
			"response" : {
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"messageType" : "response",
				"port" : 80,
				"cookies" : [],
				"headers" : {
					"Content-Length" : "26095",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:14:38 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:14:39 GMT",
					"Cache-Control" : "public",
					"Pragma" : "public",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2"
				},
				"protocol" : "http",
				"body" : "",
				"statusCode" : 200,
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com"
			},
			"messageType" : "requestResponse",
			"request" : {
				"url" : "http://foo.com:80/mutillidae/",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"protocol" : "http",
				"path" : "/mutillidae/",
				"port" : 80,
				"messageType" : "request",
				"method" : "GET",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : ""
			}
		}
	],
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"inScope" : true,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"host" : "foo.com",
	"severity" : "Information",
	"confidence" : "Firm",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 5245344,
	"protocol" : "http",
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/mutillidae/"
},
{
	"protocol" : "http",
	"issueType" : 2097920,
	"messageType" : "scanIssue",
	"port" : 80,
	"severity" : "Low",
	"confidence" : "Certain",
	"issueDetail" : "The value of the <b>User-Agent</b> HTTP header is copied into the HTML document as plain text between tags. The payload <b>9354d&lt;script&gt;alert(1)&lt;/script&gt;88056</b> was submitted in the User-Agent HTTP header. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a request header, the application's behavior is not trivial to exploit in an attack against another user. In the past, methods have existed of using client-side technologies such as Flash to cause another user to make a request containing an arbitrary HTTP header. If you can use such a technique, you can probably leverage it to exploit the XSS flaw. This limitation partially mitigates the impact of the vulnerability.",
	"url" : "http://foo.com:80/mutillidae/",
	"name" : "Cross-site scripting (reflected)",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"statusCode" : 200,
				"cookies" : [],
				"headers" : {
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:15:04 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:15:04 GMT",
					"Content-Length" : "26130",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Type" : "text/html",
					"Pragma" : "public",
					"Logged-In-User" : "",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "public"
				},
				"protocol" : "http",
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962
			},
			"request" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)9354d<script>alert(1)</script>88056",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"protocol" : "http",
				"path" : "/mutillidae/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"url" : "http://foo.com:80/mutillidae/",
				"toolFlag" : 16962,
				"referenceID" : 0
			}
		}
	],
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>"
},
{
	"port" : 80,
	"messageType" : "scanIssue",
	"severity" : "Information",
	"confidence" : "Firm",
	"protocol" : "http",
	"issueType" : 4194592,
	"url" : "http://foo.com:80/mutillidae/",
	"name" : "User agent-dependent response",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:14:38 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:14:39 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "26095",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Connection" : "close",
					"Pragma" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "public"
				}
			},
			"request" : {
				"url" : "http://foo.com:80/mutillidae/",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http",
				"path" : "/mutillidae/",
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			}
		},
		{
			"response" : {
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Content-Length" : "26154",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:15:57 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:15:57 GMT",
					"Cache-Control" : "public",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Pragma" : "public",
					"Logged-In-User" : "",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"statusCode" : 200,
				"body" : ""
			},
			"messageType" : "requestResponse",
			"request" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"path" : "/mutillidae/",
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3",
					"Connection" : "close",
					"Accept" : "*/*",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/"
			}
		}
	],
	"issueBackground" : "<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.</p>\n<p>This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.</p>\n<p>To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser. </p>",
	"inScope" : true,
	"host" : "foo.com"
},
{
	"requestResponses" : [
		{
			"response" : {
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"port" : 80,
				"messageType" : "response",
				"headers" : {
					"Cache-Control" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "26095",
					"Last-Modified" : "Wed, 08 Jun 2016 16:14:39 GMT",
					"Date" : "Wed, 08 Jun 2016 16:14:38 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT"
				},
				"cookies" : [],
				"protocol" : "http",
				"body" : "",
				"statusCode" : 200,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com"
			},
			"messageType" : "requestResponse",
			"request" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"path" : "/mutillidae/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/"
			}
		},
		{
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"headers" : {
					"Cache-Control" : "public",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Pragma" : "public",
					"Logged-In-User" : "",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Length" : "26095",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:16:02 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:16:02 GMT"
				},
				"cookies" : []
			},
			"request" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"Cookie" : "security=high; PHPSESSID=249765abfd585ca77e86618061301bcb; showhints=1",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http",
				"path" : "/mutillidae/index.php/de05fe/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"url" : "http://foo.com:80/mutillidae/index.php/de05fe/",
				"referenceID" : 0,
				"toolFlag" : 16962
			}
		},
		{
			"response" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"statusCode" : 200,
				"body" : "",
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"headers" : {
					"Date" : "Wed, 08 Jun 2016 16:16:03 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:16:03 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "26095",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Pragma" : "public",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Connection" : "close",
					"Cache-Control" : "public"
				},
				"cookies" : [],
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML"
			},
			"messageType" : "requestResponse",
			"request" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"path" : "/mutillidae/index.php/de05fe/styles/global-styles.css",
				"protocol" : "http",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Cookie" : "security=high; PHPSESSID=249765abfd585ca77e86618061301bcb; showhints=1",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/index.php/de05fe/styles/global-styles.css"
			}
		}
	],
	"remediationBackground" : "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\n<li>Setting the HTTP response header \"X-Content-Type-Options: no sniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\n<ol>\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\n<ul>\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
	"port" : 80,
	"messageType" : "scanIssue",
	"severity" : "Information",
	"confidence" : "Firm",
	"protocol" : "http",
	"issueType" : 2097960,
	"issueDetail" : "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
	"url" : "http://foo.com:80/mutillidae/",
	"name" : "Path-relative style sheet import"
},
{
	"name" : "Email addresses disclosed",
	"issueDetail" : "The following email address was disclosed in the response:<ul><li>mutillidae-development@gmail.com</li></ul>",
	"url" : "http://foo.com:80/mutillidae/",
	"issueType" : 6291968,
	"protocol" : "http",
	"confidence" : "Certain",
	"severity" : "Information",
	"port" : 80,
	"messageType" : "scanIssue",
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	"remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : "",
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "public",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:26:43 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:26:43 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "24407"
				},
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0
			},
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"url" : "http://foo.com:80/mutillidae/?page=credits.php",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"messageType" : "request",
				"port" : 80,
				"query" : "page=credits.php",
				"method" : "GET",
				"path" : "/mutillidae/"
			}
		}
	]
},
{
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"inScope" : true,
	"host" : "foo.com",
	"requestResponses" : [
		{
			"request" : {
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http",
				"path" : "/mutillidae/",
				"messageType" : "request",
				"port" : 80,
				"query" : "page=17c60\"><script>alert(1)<%2fscript>4e1eb",
				"method" : "GET",
				"url" : "http://foo.com:80/mutillidae/?page=17c60\"><script>alert(1)<%2fscript>4e1eb",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : ""
			},
			"messageType" : "requestResponse",
			"response" : {
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"headers" : {
					"Content-Length" : "21945",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:26:48 GMT",
					"Date" : "Wed, 08 Jun 2016 16:26:47 GMT",
					"Cache-Control" : "public",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2"
				},
				"cookies" : [],
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : ""
			}
		}
	],
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	"protocol" : "http",
	"issueType" : 2097920,
	"messageType" : "scanIssue",
	"port" : 80,
	"severity" : "High",
	"confidence" : "Certain",
	"issueDetail" : "The value of the <b>page</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>17c60\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;4e1eb</b> was submitted in the page parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.",
	"url" : "http://foo.com:80/mutillidae/",
	"name" : "Cross-site scripting (reflected)"
},
{
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>File path traversal vulnerabilities arise when user-controllable data is used within a filesystem operation in an unsafe manner. Typically, a user-supplied filename is appended to a directory prefix in order to read or write the contents of a file. If vulnerable, an attacker can supply path traversal sequences (using dot-dot-slash characters) to break out of the intended directory and read or write files elsewhere on the filesystem.</p>\n<p>This is typically a very serious vulnerability, enabling an attacker to access sensitive files containing configuration data, passwords, database records, log data, source code, and program scripts and binaries. </p>",
	"requestResponses" : [
		{
			"request" : {
				"url" : "http://foo.com:80/mutillidae/?page=..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"messageType" : "request",
				"query" : "page=..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd",
				"method" : "GET",
				"port" : 80,
				"path" : "/mutillidae/",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com"
			},
			"messageType" : "requestResponse",
			"response" : {
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Pragma" : "public",
					"Logged-In-User" : "",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "public",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:27:18 GMT",
					"Date" : "Wed, 08 Jun 2016 16:27:18 GMT",
					"Content-Length" : "23066",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10"
				},
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : ""
			}
		}
	],
	"remediationBackground" : "<p>Ideally, application functionality should be designed in such a way that user-controllable data does not need to be passed to filesystem operations. This can normally be achieved by referencing known files via an index number rather than their name, and using application-generated filenames to save user-supplied file content.</p>\n<p>If it is considered unavoidable to pass user-controllable data to a filesystem operation, three layers of defense can be employed to prevent path traversal attacks: </p>\n<ul><li>User-controllable data should be strictly validated before being passed to any filesystem operation. In particular, input containing dot-dot sequences should be blocked.</li><li>After validating user input, the application can use a suitable filesystem API to verify that the file to be accessed is actually located within the base directory used by the application. In Java, this can be achieved by instantiating a java.io.File object using the user-supplied filename and then calling the getCanonicalPath method on this object. If the string returned by this method does not begin with the name of the start directory, then the user has somehow bypassed the application's input filters, and the request should be rejected. In ASP.NET, the same check can be performed by passing the user-supplied filename to the System.Io.Path.GetFullPath method and checking the returned string in the same way as described for Java.</li><li>The directory used to store files that are accessed using user-controllable data can be located on a separate logical volume to other sensitive application and operating system files, so that these cannot be reached via path traversal attacks. In Unix-based systems, this can be achieved using a chrooted filesystem; on Windows, this can be achieved by mounting the base directory as a new logical drive and using the associated drive letter to access its contents.</li></ul>",
	"protocol" : "http",
	"issueType" : 1049344,
	"messageType" : "scanIssue",
	"port" : 80,
	"confidence" : "Firm",
	"severity" : "High",
	"url" : "http://foo.com:80/mutillidae/",
	"issueDetail" : "The <b>page</b> parameter is vulnerable to path traversal attacks, enabling read access to arbitrary files on the server.<br><br>The payload <b>../../../../../../../../../../../../../../../../etc/passwd</b> was submitted in the page parameter. The requested file was returned in the application's response.",
	"name" : "File path traversal"
},
{
	"remediationDetail" : "Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. ",
	"requestResponses" : [
		{
			"response" : {
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"messageType" : "response",
				"port" : 80,
				"cookies" : [],
				"headers" : {
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "public",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:28:12 GMT",
					"Date" : "Wed, 08 Jun 2016 16:28:12 GMT",
					"Content-Length" : "24464",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10"
				},
				"protocol" : "http",
				"body" : "",
				"statusCode" : 200,
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com"
			},
			"messageType" : "requestResponse",
			"request" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"protocol" : "http",
				"headers" : {
					"Referer" : "http://www.google.com/search?hl=en&q=17211';alert(1)//179",
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"query" : "page=credits.php",
				"path" : "/mutillidae/",
				"url" : "http://foo.com:80/mutillidae/?page=credits.php",
				"toolFlag" : 16962,
				"referenceID" : 0
			}
		}
	],
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"name" : "Cross-site scripting (reflected)",
	"issueDetail" : "The value of the <b>Referer</b> HTTP header is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>17211';alert(1)//179</b> was submitted in the Referer HTTP header. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.<br><br>Because the user data that is copied into the response is submitted within a request header, the application's behavior is not trivial to exploit in an attack against another user. In the past, methods have existed of using client-side technologies such as Flash to cause another user to make a request containing an arbitrary HTTP header. If you can use such a technique, you can probably leverage it to exploit the XSS flaw. This limitation partially mitigates the impact of the vulnerability.",
	"url" : "http://foo.com:80/mutillidae/",
	"confidence" : "Certain",
	"severity" : "Low",
	"port" : 80,
	"messageType" : "scanIssue",
	"issueType" : 2097920,
	"protocol" : "http"
},
{
	"issueBackground" : "<p>Application responses may depend systematically on the presence or absence of the Referer header in requests. This behavior does not necessarily constitute a security vulnerability, and you should investigate the nature of and reason for the differential responses to determine whether a vulnerability is present.</p>\n<p>Common explanations for Referer-dependent responses include: </p>\n<ul><li>Referer-based access controls, where the application assumes that if you have arrived from one privileged location then you are authorized to access another privileged location. These controls can be trivially defeated by supplying an accepted Referer header in requests for the vulnerable function.</li><li>Attempts to prevent cross-site request forgery attacks by verifying that requests to perform privileged actions originated from within the application itself and not from some external location. Such defenses are often not robust, and can be bypassed by removing the Referer header entirely.</li>\n<li>Delivery of Referer-tailored content, such as welcome messages to visitors from specific domains, search-engine optimization (SEO) techniques, and other ways of tailoring the user's experience. Such behaviors often have no security impact; however, unsafe processing of the Referer header may introduce vulnerabilities such as SQL injection and cross-site scripting. If parts of the document (such as META keywords) are updated based on search engine queries contained in the Referer header, then the application may be vulnerable to persistent code injection attacks, in which search terms are manipulated to cause malicious content to appear in responses served to other application users.</li></ul>",
	"inScope" : true,
	"host" : "foo.com",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Date" : "Wed, 08 Jun 2016 16:26:43 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:26:43 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Content-Length" : "24407",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Cache-Control" : "public"
				},
				"messageType" : "response",
				"port" : 80,
				"statusCode" : 200,
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com"
			},
			"request" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"path" : "/mutillidae/",
				"messageType" : "request",
				"port" : 80,
				"query" : "page=credits.php",
				"method" : "GET",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/mutillidae/?page=credits.php"
			}
		},
		{
			"response" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"statusCode" : 200,
				"body" : "",
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:28:32 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:28:33 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "24429",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Connection" : "close",
					"Pragma" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "public"
				},
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML"
			},
			"messageType" : "requestResponse",
			"request" : {
				"url" : "http://foo.com:80/mutillidae/?page=credits.php",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Referer" : "http://84937ad558.com/"
				},
				"port" : 80,
				"messageType" : "request",
				"query" : "page=credits.php",
				"method" : "GET",
				"path" : "/mutillidae/",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : ""
			}
		}
	],
	"remediationBackground" : "<p>The Referer header is not a robust foundation on which to build access controls. Any such measures should be replaced with more secure alternatives that are not vulnerable to Referer spoofing.</p>\n<p>If the contents of responses is updated based on Referer data, then the same defenses against malicious input should be employed here as for any other kinds of user-supplied data. </p>",
	"url" : "http://foo.com:80/mutillidae/",
	"name" : "Referer-dependent response",
	"protocol" : "http",
	"issueType" : 4194560,
	"port" : 80,
	"messageType" : "scanIssue",
	"confidence" : "Firm",
	"severity" : "Information"
},
{
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
	"requestResponses" : [
		{
			"request" : {
				"path" : "/mutillidae/",
				"port" : 80,
				"messageType" : "request",
				"method" : "GET",
				"query" : "page=text-file-viewer.php",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/mutillidae/?page=text-file-viewer.php",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"body" : "",
				"httpVersion" : "HTTP/1.1"
			},
			"messageType" : "requestResponse",
			"response" : {
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Content-Length" : "25783",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Date" : "Wed, 08 Jun 2016 16:40:04 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:40:04 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Cache-Control" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Pragma" : "public"
				},
				"messageType" : "response",
				"port" : 80,
				"statusCode" : 200,
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			}
		}
	],
	"remediationBackground" : "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties.</p>",
	"issueDetail" : "The page was loaded from a URL containing a query string:<ul><li>http://foo.com/mutillidae/?page=text-file-viewer.php</li></ul>The response contains the following links to other domains:<ul><li>http://en.wikipedia.org/wiki/Robots_exclusion_standard</li><li>http://irongeek.com/</li><li>http://samurai.inguardians.com/</li><li>http://www.hackersforcharity.org/ghdb/</li><li>http://www.irongeek.com/</li><li>http://www.irongeek.com/i.php?page=security/mutillidae-deliberately-vulnerable-php-owasp-top-10</li><li>http://www.owasp.org/index.php/Top_10_2007-A3</li><li>http://www.owasp.org/index.php/Top_10_2007-A6</li><li>http://www.owasp.org/index.php/Top_10_2010-A1</li><li>http://www.owasp.org/index.php/Top_10_2010-A10</li><li>http://www.owasp.org/index.php/Top_10_2010-A2</li><li>http://www.owasp.org/index.php/Top_10_2010-A3</li><li>http://www.owasp.org/index.php/Top_10_2010-A4</li><li>http://www.owasp.org/index.php/Top_10_2010-A5</li><li>http://www.owasp.org/index.php/Top_10_2010-A6</li><li>http://www.owasp.org/index.php/Top_10_2010-A7</li><li>http://www.owasp.org/index.php/Top_10_2010-A8</li><li>http://www.owasp.org/index.php/Top_10_2010-A9</li><li>http://www.textfiles.com/</li><li>http://www.youtube.com/user/webpwnized</li><li>https://addons.mozilla.org/en-US/firefox/collections/jdruin/pro-web-developer-qa-pack/</li><li>https://twitter.com/webpwnized</li><li>https://www.owasp.org/</li><li>https://www.owasp.org/index.php/Top_Ten</li></ul>",
	"url" : "http://foo.com:80/mutillidae/",
	"name" : "Cross-domain Referer leakage",
	"protocol" : "http",
	"issueType" : 5243904,
	"messageType" : "scanIssue",
	"port" : 80,
	"severity" : "Information",
	"confidence" : "Certain"
},
{
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"statusCode" : 200,
				"body" : "",
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Connection" : "close",
					"Cache-Control" : "public",
					"Last-Modified" : "Wed, 08 Jun 2016 16:15:18 GMT",
					"Date" : "Wed, 08 Jun 2016 16:15:17 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "24742"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML"
			},
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"url" : "http://foo.com:80/mutillidae/index.php?page=dns-lookup.php",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"protocol" : "http",
				"path" : "/mutillidae/index.php",
				"messageType" : "request",
				"query" : "page=dns-lookup.php",
				"method" : "GET",
				"port" : 80
			}
		}
	],
	"issueType" : 5245344,
	"protocol" : "http",
	"confidence" : "Firm",
	"severity" : "Information",
	"port" : 80,
	"messageType" : "scanIssue",
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/mutillidae/index.php"
},
{
	"name" : "Cross-domain Referer leakage",
	"issueDetail" : "The page was loaded from a URL containing a query string:<ul><li>http://foo.com/mutillidae/index.php?page=home.php</li></ul>The response contains the following links to other domains:<ul><li>http://en.wikipedia.org/wiki/Robots_exclusion_standard</li><li>http://irongeek.com/</li><li>http://samurai.inguardians.com/</li><li>http://www.backtrack-linux.org/</li><li>http://www.eclipse.org/pdt/</li><li>http://www.hackersforcharity.org/</li><li>http://www.hackersforcharity.org/ghdb/</li><li>http://www.irongeek.com/</li><li>http://www.irongeek.com/i.php?page=security/mutillidae-deliberately-vulnerable-php-owasp-top-10</li><li>http://www.madirish.net/?article=229</li><li>http://www.owasp.org/index.php/Top_10_2007-A3</li><li>http://www.owasp.org/index.php/Top_10_2007-A6</li><li>http://www.owasp.org/index.php/Top_10_2010-A1</li><li>http://www.owasp.org/index.php/Top_10_2010-A10</li><li>http://www.owasp.org/index.php/Top_10_2010-A2</li><li>http://www.owasp.org/index.php/Top_10_2010-A3</li><li>http://www.owasp.org/index.php/Top_10_2010-A4</li><li>http://www.owasp.org/index.php/Top_10_2010-A5</li><li>http://www.owasp.org/index.php/Top_10_2010-A6</li><li>http://www.owasp.org/index.php/Top_10_2010-A7</li><li>http://www.owasp.org/index.php/Top_10_2010-A8</li><li>http://www.owasp.org/index.php/Top_10_2010-A9</li><li>http://www.php.net/</li><li>http://www.quest.com/toad-for-mysql/</li><li>http://www.youtube.com/user/webpwnized</li><li>https://addons.mozilla.org/en-US/firefox/collections/jdruin/pro-web-developer-qa-pack/</li><li>https://twitter.com/webpwnized</li><li>https://www.owasp.org/</li><li>https://www.owasp.org/index.php/Top_Ten</li></ul>",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"issueType" : 5243904,
	"protocol" : "http",
	"confidence" : "Certain",
	"severity" : "Information",
	"messageType" : "scanIssue",
	"port" : 80,
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
	"remediationBackground" : "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties.</p>",
	"requestResponses" : [
		{
			"request" : {
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/mutillidae/index.php?page=home.php",
				"method" : "GET",
				"messageType" : "request",
				"query" : "page=home.php",
				"port" : 80,
				"path" : "/mutillidae/index.php",
				"protocol" : "http",
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			},
			"messageType" : "requestResponse",
			"response" : {
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:16:04 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:16:04 GMT",
					"Content-Length" : "26095",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "public"
				},
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"statusCode" : 200,
				"body" : ""
			}
		}
	]
},
{
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"inScope" : true,
	"host" : "foo.com",
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	"requestResponses" : [
		{
			"request" : {
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/mutillidae/index.php?page=54fb0\"><script>alert(1)<%2fscript>edb9b",
				"path" : "/mutillidae/index.php",
				"messageType" : "request",
				"method" : "GET",
				"query" : "page=54fb0\"><script>alert(1)<%2fscript>edb9b",
				"port" : 80,
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			},
			"messageType" : "requestResponse",
			"response" : {
				"body" : "",
				"statusCode" : 200,
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"port" : 80,
				"messageType" : "response",
				"cookies" : [],
				"headers" : {
					"Content-Length" : "21945",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:15:27 GMT",
					"Date" : "Wed, 08 Jun 2016 16:15:26 GMT",
					"Cache-Control" : "public",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2"
				},
				"protocol" : "http"
			}
		}
	],
	"name" : "Cross-site scripting (reflected)",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"issueDetail" : "The value of the <b>page</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>54fb0\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;edb9b</b> was submitted in the page parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.",
	"issueType" : 2097920,
	"protocol" : "http",
	"severity" : "High",
	"confidence" : "Certain",
	"port" : 80,
	"messageType" : "scanIssue"
},
{
	"name" : "File path traversal",
	"issueDetail" : "The <b>page</b> parameter is vulnerable to path traversal attacks, enabling read access to arbitrary files on the server.<br><br>The payload <b>../../../../../../../../../../../../../../../../etc/passwd</b> was submitted in the page parameter. The requested file was returned in the application's response.",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"severity" : "High",
	"confidence" : "Firm",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 1049344,
	"protocol" : "http",
	"requestResponses" : [
		{
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/index.php?page=..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd",
				"path" : "/mutillidae/index.php",
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"query" : "page=..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http"
			},
			"messageType" : "requestResponse",
			"response" : {
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Content-Length" : "23066",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:16:07 GMT",
					"Date" : "Wed, 08 Jun 2016 16:16:06 GMT",
					"Cache-Control" : "public",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Pragma" : "public",
					"Logged-In-User" : "",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2"
				},
				"messageType" : "response",
				"port" : 80,
				"statusCode" : 200,
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com"
			}
		}
	],
	"remediationBackground" : "<p>Ideally, application functionality should be designed in such a way that user-controllable data does not need to be passed to filesystem operations. This can normally be achieved by referencing known files via an index number rather than their name, and using application-generated filenames to save user-supplied file content.</p>\n<p>If it is considered unavoidable to pass user-controllable data to a filesystem operation, three layers of defense can be employed to prevent path traversal attacks: </p>\n<ul><li>User-controllable data should be strictly validated before being passed to any filesystem operation. In particular, input containing dot-dot sequences should be blocked.</li><li>After validating user input, the application can use a suitable filesystem API to verify that the file to be accessed is actually located within the base directory used by the application. In Java, this can be achieved by instantiating a java.io.File object using the user-supplied filename and then calling the getCanonicalPath method on this object. If the string returned by this method does not begin with the name of the start directory, then the user has somehow bypassed the application's input filters, and the request should be rejected. In ASP.NET, the same check can be performed by passing the user-supplied filename to the System.Io.Path.GetFullPath method and checking the returned string in the same way as described for Java.</li><li>The directory used to store files that are accessed using user-controllable data can be located on a separate logical volume to other sensitive application and operating system files, so that these cannot be reached via path traversal attacks. In Unix-based systems, this can be achieved using a chrooted filesystem; on Windows, this can be achieved by mounting the base directory as a new logical drive and using the associated drive letter to access its contents.</li></ul>",
	"issueBackground" : "<p>File path traversal vulnerabilities arise when user-controllable data is used within a filesystem operation in an unsafe manner. Typically, a user-supplied filename is appended to a directory prefix in order to read or write the contents of a file. If vulnerable, an attacker can supply path traversal sequences (using dot-dot-slash characters) to break out of the intended directory and read or write files elsewhere on the filesystem.</p>\n<p>This is typically a very serious vulnerability, enabling an attacker to access sensitive files containing configuration data, passwords, database records, log data, source code, and program scripts and binaries. </p>",
	"inScope" : true,
	"host" : "foo.com"
},
{
	"protocol" : "http",
	"issueType" : 2097920,
	"port" : 80,
	"messageType" : "scanIssue",
	"confidence" : "Certain",
	"severity" : "Low",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"issueDetail" : "The value of the <b>User-Agent</b> HTTP header is copied into the HTML document as plain text between tags. The payload <b>e9ad0&lt;script&gt;alert(1)&lt;/script&gt;52d05</b> was submitted in the User-Agent HTTP header. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a request header, the application's behavior is not trivial to exploit in an attack against another user. In the past, methods have existed of using client-side technologies such as Flash to cause another user to make a request containing an arbitrary HTTP header. If you can use such a technique, you can probably leverage it to exploit the XSS flaw. This limitation partially mitigates the impact of the vulnerability.",
	"name" : "Cross-site scripting (reflected)",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200,
				"headers" : {
					"Last-Modified" : "Wed, 08 Jun 2016 16:16:57 GMT",
					"Date" : "Wed, 08 Jun 2016 16:16:57 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "24777",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Cache-Control" : "public"
				},
				"cookies" : [],
				"protocol" : "http",
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962
			},
			"request" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)e9ad0<script>alert(1)</script>52d05",
					"Accept" : "*/*",
					"Connection" : "close",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"query" : "page=dns-lookup.php",
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"path" : "/mutillidae/index.php",
				"url" : "http://foo.com:80/mutillidae/index.php?page=dns-lookup.php",
				"toolFlag" : 16962,
				"referenceID" : 0
			}
		}
	],
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>"
},
{
	"confidence" : "Certain",
	"severity" : "Low",
	"port" : 80,
	"messageType" : "scanIssue",
	"issueType" : 2097920,
	"protocol" : "http",
	"name" : "Cross-site scripting (reflected)",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"issueDetail" : "The value of the <b>Referer</b> HTTP header is copied into the value of an HTML tag attribute which is an event handler and is encapsulated in double quotation marks. The payload <b>88046';alert(1)//166</b> was submitted in the Referer HTTP header. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Note that the input is echoed into an existing event handler within the response. JavaScript injected into this context will only execute when the relevant event occurs. This may require some action by the victim user, and may hinder exploitation. It may be possible to manually fine tune an attack to increase the likelihood that the event occurs.<br><br>Because the user data that is copied into the response is submitted within a request header, the application's behavior is not trivial to exploit in an attack against another user. In the past, methods have existed of using client-side technologies such as Flash to cause another user to make a request containing an arbitrary HTTP header. If you can use such a technique, you can probably leverage it to exploit the XSS flaw. This limitation partially mitigates the impact of the vulnerability.",
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Last-Modified" : "Wed, 08 Jun 2016 16:17:15 GMT",
					"Date" : "Wed, 08 Jun 2016 16:17:14 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Content-Length" : "24799",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Pragma" : "public",
					"Logged-In-User" : "",
					"Cache-Control" : "public"
				},
				"messageType" : "response",
				"port" : 80,
				"statusCode" : 200,
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			},
			"request" : {
				"url" : "http://foo.com:80/mutillidae/index.php?page=dns-lookup.php",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Referer" : "http://www.google.com/search?hl=en&q=88046';alert(1)//166"
				},
				"protocol" : "http",
				"path" : "/mutillidae/index.php",
				"query" : "page=dns-lookup.php",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com"
			}
		}
	],
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"inScope" : true,
	"host" : "foo.com",
	"remediationDetail" : "Echoing user-controllable data within an event handler is inherently dangerous and can make XSS attacks difficult to prevent. The defense of HTML-encoding user-controllable data is not effective in this context, because browsers will HTML-decode the event handler string before executing it as script.  If at all possible, the application should avoid echoing user data within this context. "
},
{
	"severity" : "Information",
	"confidence" : "Firm",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 4194560,
	"protocol" : "http",
	"name" : "Referer-dependent response",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"remediationBackground" : "<p>The Referer header is not a robust foundation on which to build access controls. Any such measures should be replaced with more secure alternatives that are not vulnerable to Referer spoofing.</p>\n<p>If the contents of responses is updated based on Referer data, then the same defenses against malicious input should be employed here as for any other kinds of user-supplied data. </p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"port" : 80,
				"messageType" : "response",
				"headers" : {
					"Last-Modified" : "Wed, 08 Jun 2016 16:15:18 GMT",
					"Date" : "Wed, 08 Jun 2016 16:15:17 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "24742",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Cache-Control" : "public"
				},
				"cookies" : [],
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"body" : "",
				"statusCode" : 200
			},
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/index.php?page=dns-lookup.php",
				"path" : "/mutillidae/index.php",
				"query" : "page=dns-lookup.php",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"protocol" : "http"
			}
		},
		{
			"messageType" : "requestResponse",
			"response" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : "",
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:17:36 GMT",
					"Date" : "Wed, 08 Jun 2016 16:17:36 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "24764",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Pragma" : "public",
					"Logged-In-User" : "",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "public"
				},
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962
			},
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"url" : "http://foo.com:80/mutillidae/index.php?page=dns-lookup.php",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Referer" : "http://84937ad558.com/",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"messageType" : "request",
				"query" : "page=dns-lookup.php",
				"port" : 80,
				"method" : "GET",
				"path" : "/mutillidae/index.php"
			}
		}
	],
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>Application responses may depend systematically on the presence or absence of the Referer header in requests. This behavior does not necessarily constitute a security vulnerability, and you should investigate the nature of and reason for the differential responses to determine whether a vulnerability is present.</p>\n<p>Common explanations for Referer-dependent responses include: </p>\n<ul><li>Referer-based access controls, where the application assumes that if you have arrived from one privileged location then you are authorized to access another privileged location. These controls can be trivially defeated by supplying an accepted Referer header in requests for the vulnerable function.</li><li>Attempts to prevent cross-site request forgery attacks by verifying that requests to perform privileged actions originated from within the application itself and not from some external location. Such defenses are often not robust, and can be bypassed by removing the Referer header entirely.</li>\n<li>Delivery of Referer-tailored content, such as welcome messages to visitors from specific domains, search-engine optimization (SEO) techniques, and other ways of tailoring the user's experience. Such behaviors often have no security impact; however, unsafe processing of the Referer header may introduce vulnerabilities such as SQL injection and cross-site scripting. If parts of the document (such as META keywords) are updated based on search engine queries contained in the Referer header, then the application may be vulnerable to persistent code injection attacks, in which search terms are manipulated to cause malicious content to appear in responses served to other application users.</li></ul>"
},
{
	"protocol" : "http",
	"issueType" : 4194592,
	"port" : 80,
	"messageType" : "scanIssue",
	"severity" : "Information",
	"confidence" : "Firm",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"name" : "User agent-dependent response",
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.</p>\n<p>This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.</p>\n<p>To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser. </p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200,
				"cookies" : [],
				"headers" : {
					"Cache-Control" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Pragma" : "public",
					"Logged-In-User" : "",
					"Content-Length" : "24742",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Last-Modified" : "Wed, 08 Jun 2016 16:15:18 GMT",
					"Date" : "Wed, 08 Jun 2016 16:15:17 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT"
				},
				"protocol" : "http",
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0
			},
			"request" : {
				"url" : "http://foo.com:80/mutillidae/index.php?page=dns-lookup.php",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"query" : "page=dns-lookup.php",
				"path" : "/mutillidae/index.php",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com"
			}
		},
		{
			"messageType" : "requestResponse",
			"response" : {
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Last-Modified" : "Wed, 08 Jun 2016 16:17:39 GMT",
					"Date" : "Wed, 08 Jun 2016 16:17:39 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Content-Length" : "24801",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Logged-In-User" : "",
					"Content-Type" : "text/html",
					"Pragma" : "public",
					"Connection" : "close",
					"Cache-Control" : "public"
				},
				"port" : 80,
				"messageType" : "response",
				"statusCode" : 200,
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com"
			},
			"request" : {
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/mutillidae/index.php?page=dns-lookup.php",
				"messageType" : "request",
				"port" : 80,
				"query" : "page=dns-lookup.php",
				"method" : "GET",
				"path" : "/mutillidae/index.php",
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			}
		}
	]
},
{
	"issueBackground" : "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\n<ol>\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\n<ul>\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
	"inScope" : true,
	"host" : "foo.com",
	"requestResponses" : [
		{
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/index.php?page=dns-lookup.php",
				"messageType" : "request",
				"query" : "page=dns-lookup.php",
				"method" : "GET",
				"port" : 80,
				"path" : "/mutillidae/index.php",
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				}
			},
			"response" : {
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"headers" : {
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Cache-Control" : "public",
					"Date" : "Wed, 08 Jun 2016 16:15:17 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:15:18 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "24742"
				},
				"cookies" : [],
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : ""
			},
			"messageType" : "requestResponse"
		},
		{
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Cache-Control" : "public",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Length" : "24742",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:17:44 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:17:44 GMT"
				},
				"port" : 80,
				"messageType" : "response"
			},
			"request" : {
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"query" : "page=dns-lookup.php",
				"path" : "/mutillidae/index.php/c9bd38/",
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Cookie" : "security=high; PHPSESSID=249765abfd585ca77e86618061301bcb; showhints=1",
					"Connection" : "close",
					"Accept" : "*/*",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/index.php/c9bd38/?page=dns-lookup.php",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1"
			}
		},
		{
			"response" : {
				"body" : "",
				"statusCode" : 200,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"messageType" : "response",
				"port" : 80,
				"cookies" : [],
				"headers" : {
					"Cache-Control" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "26095",
					"Date" : "Wed, 08 Jun 2016 16:17:44 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:17:45 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT"
				},
				"protocol" : "http"
			},
			"messageType" : "requestResponse",
			"request" : {
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/index.php/c9bd38/styles/global-styles.css",
				"port" : 80,
				"messageType" : "request",
				"method" : "GET",
				"path" : "/mutillidae/index.php/c9bd38/styles/global-styles.css",
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"Cookie" : "security=high; PHPSESSID=249765abfd585ca77e86618061301bcb; showhints=1",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com"
			}
		}
	],
	"remediationBackground" : "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\n<li>Setting the HTTP response header \"X-Content-Type-Options: no sniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
	"protocol" : "http",
	"issueType" : 2097960,
	"messageType" : "scanIssue",
	"port" : 80,
	"confidence" : "Firm",
	"severity" : "Information",
	"issueDetail" : "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"name" : "Path-relative style sheet import"
},
{
	"protocol" : "http",
	"issueType" : 6292224,
	"port" : 80,
	"messageType" : "scanIssue",
	"severity" : "Information",
	"confidence" : "Certain",
	"issueDetail" : "The following RFC 1918 IP address was disclosed in the response:<ul><li>foo.com</li></ul>",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"name" : "Private IP addresses disclosed",
	"inScope" : true,
	"issueBackground" : "<p>RFC 1918 specifies ranges of IP addresses that are reserved for use in private networks and cannot be routed on the public Internet. Although various methods exist by which an attacker can determine the public IP addresses in use by an organization, the private addresses used internally cannot usually be determined in the same ways.</p>\n<p>Discovering the private addresses used within an organization can help an attacker in carrying out network-layer attacks aiming to penetrate the organization's internal infrastructure. </p>",
	"host" : "foo.com",
	"remediationBackground" : "<p>There is not usually any good reason to disclose the internal IP addresses used within an organization's infrastructure. If these are being returned in service banners or debug messages, then the relevant services should be configured to mask the private addresses. If they are being used to track back-end servers for load balancing purposes, then the addresses should be rewritten with innocuous identifiers from which an attacker cannot infer any useful information about the infrastructure.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Cache-Control" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "25969",
					"Date" : "Wed, 08 Jun 2016 16:41:51 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:41:51 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT"
				},
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"statusCode" : 200,
				"body" : ""
			},
			"request" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"path" : "/mutillidae/index.php",
				"port" : 80,
				"messageType" : "request",
				"query" : "page=capture-data.php",
				"method" : "GET",
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/index.php?page=capture-data.php"
			}
		}
	]
},
{
	"name" : "Cross-site scripting (reflected)",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"issueDetail" : "The value of the <b>page</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>[0x00]d8bc1&lt;script&gt;alert(1)&lt;/script&gt;d1f38</b> was submitted in the page parameter. This input was echoed as <b>d8bc1&lt;script&gt;alert(1)&lt;/script&gt;d1f38</b> in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The application attempts to block certain characters that are often used in XSS attacks but this can be circumvented by submitting a NULL byte anywhere before the characters that are being blocked. ",
	"confidence" : "Certain",
	"severity" : "High",
	"port" : 80,
	"messageType" : "scanIssue",
	"issueType" : 2097920,
	"protocol" : "http",
	"remediationDetail" : "NULL byte bypasses typically arise when the application is being defended by a web application firewall (WAF) that is written in native code, where strings are terminated by a NULL byte. You should fix the actual vulnerability within the application code, and if appropriate ask your WAF vendor to provide a fix for the NULL byte bypass. ",
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	"requestResponses" : [
		{
			"response" : {
				"protocol" : "http",
				"headers" : {
					"Date" : "Wed, 08 Jun 2016 16:41:52 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:41:52 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Content-Length" : "26113",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Pragma" : "public",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Logged-In-User" : "",
					"Cache-Control" : "public"
				},
				"cookies" : [],
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"statusCode" : 200,
				"body" : ""
			},
			"messageType" : "requestResponse",
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"url" : "http://foo.com:80/mutillidae/index.php?page=capture-data.php%00d8bc1<script>alert(1)<%2fscript>d1f38",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"query" : "page=capture-data.php%00d8bc1<script>alert(1)<%2fscript>d1f38",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"path" : "/mutillidae/index.php"
			}
		}
	],
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>"
},
{
	"requestResponses" : [
		{
			"request" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"port" : 80,
				"messageType" : "request",
				"method" : "GET",
				"query" : "page=capture-data.php&8af53<script>alert(1)<%2fscript>41c3c=1",
				"path" : "/mutillidae/index.php",
				"protocol" : "http",
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/index.php?page=capture-data.php&8af53<script>alert(1)<%2fscript>41c3c=1"
			},
			"response" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200,
				"port" : 80,
				"messageType" : "response",
				"cookies" : [],
				"headers" : {
					"Cache-Control" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Logged-In-User" : "",
					"Content-Type" : "text/html",
					"Pragma" : "public",
					"Connection" : "close",
					"Content-Length" : "26049",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Date" : "Wed, 08 Jun 2016 16:41:57 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:41:57 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT"
				},
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML"
			},
			"messageType" : "requestResponse"
		}
	],
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"name" : "Cross-site scripting (reflected)",
	"issueDetail" : "The name of an arbitrarily supplied URL parameter is copied into the HTML document as plain text between tags. The payload <b>8af53&lt;script&gt;alert(1)&lt;/script&gt;41c3c</b> was submitted in the name of an arbitrarily supplied URL parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"confidence" : "Certain",
	"severity" : "High",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 2097920,
	"protocol" : "http"
},
{
	"remediationDetail" : "The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>\n<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>",
	"remediationBackground" : "<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>\n<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>\n<ul>\n  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li><li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>\n</ul>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"headers" : {
					"Cache-Control" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "26163",
					"Date" : "Wed, 08 Jun 2016 16:41:58 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:41:58 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT"
				},
				"cookies" : [],
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"statusCode" : 200,
				"body" : ""
			},
			"request" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"protocol" : "http",
				"path" : "/mutillidae/index.php",
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"query" : "page=capture-data.php&1'=1",
				"url" : "http://foo.com:80/mutillidae/index.php?page=capture-data.php&1'=1",
				"referenceID" : 0,
				"toolFlag" : 16962
			}
		},
		{
			"response" : {
				"messageType" : "response",
				"port" : 80,
				"cookies" : [],
				"headers" : {
					"Cache-Control" : "public",
					"Logged-In-User" : "",
					"Content-Type" : "text/html",
					"Pragma" : "public",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Length" : "25985",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:41:58 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:41:58 GMT"
				},
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"statusCode" : 200
			},
			"messageType" : "requestResponse",
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/index.php?page=capture-data.php&1''=1",
				"path" : "/mutillidae/index.php",
				"method" : "GET",
				"messageType" : "request",
				"query" : "page=capture-data.php&1''=1",
				"port" : 80,
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http"
			}
		}
	],
	"issueDetail" : "The name of an arbitrarily supplied URL parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the name of an arbitrarily supplied URL parameter, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br>The database appears to be MySQL.",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"name" : "SQL injection",
	"protocol" : "http",
	"issueType" : 1049088,
	"port" : 80,
	"messageType" : "scanIssue",
	"confidence" : "Certain",
	"severity" : "High"
},
{
	"remediationDetail" : "The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ",
	"requestResponses" : [
		{
			"request" : {
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)'",
					"Accept" : "*/*",
					"Connection" : "close",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"protocol" : "http",
				"path" : "/mutillidae/index.php",
				"messageType" : "request",
				"method" : "GET",
				"query" : "page=capture-data.php",
				"port" : 80,
				"url" : "http://foo.com:80/mutillidae/index.php?page=capture-data.php",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : ""
			},
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"headers" : {
					"Last-Modified" : "Wed, 08 Jun 2016 16:42:03 GMT",
					"Date" : "Wed, 08 Jun 2016 16:42:03 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "26151",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Cache-Control" : "public"
				},
				"cookies" : [],
				"messageType" : "response",
				"port" : 80
			}
		},
		{
			"request" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"path" : "/mutillidae/index.php",
				"messageType" : "request",
				"query" : "page=capture-data.php",
				"port" : 80,
				"method" : "GET",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)''",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/mutillidae/index.php?page=capture-data.php"
			},
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Cache-Control" : "public",
					"Date" : "Wed, 08 Jun 2016 16:42:03 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:42:03 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "25973"
				},
				"messageType" : "response",
				"port" : 80
			}
		}
	],
	"remediationBackground" : "<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>\n<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>\n<ul>\n  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li><li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>\n</ul>",
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>\n<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>",
	"name" : "SQL injection",
	"issueDetail" : "The <b>User-Agent</b> HTTP header appears to be vulnerable to SQL injection attacks. A single quote was submitted in the User-Agent HTTP header, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br>The database appears to be MySQL.",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"severity" : "High",
	"confidence" : "Certain",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 1049088,
	"protocol" : "http"
},
{
	"issueType" : 2097920,
	"protocol" : "http",
	"severity" : "Low",
	"confidence" : "Certain",
	"port" : 80,
	"messageType" : "scanIssue",
	"name" : "Cross-site scripting (reflected)",
	"issueDetail" : "The value of the <b>Referer</b> HTTP header is copied into the HTML document as plain text between tags. The payload <b>2f366&lt;script&gt;alert(1)&lt;/script&gt;982a9</b> was submitted in the Referer HTTP header. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>Because the user data that is copied into the response is submitted within a request header, the application's behavior is not trivial to exploit in an attack against another user. In the past, methods have existed of using client-side technologies such as Flash to cause another user to make a request containing an arbitrary HTTP header. If you can use such a technique, you can probably leverage it to exploit the XSS flaw. This limitation partially mitigates the impact of the vulnerability.",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	"requestResponses" : [
		{
			"request" : {
				"url" : "http://foo.com:80/mutillidae/index.php?page=capture-data.php",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Referer" : "http://www.google.com/search?hl=en&q=2f366<script>alert(1)</script>982a9",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"port" : 80,
				"messageType" : "request",
				"method" : "GET",
				"query" : "page=capture-data.php",
				"path" : "/mutillidae/index.php",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : ""
			},
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Logged-In-User" : "",
					"Pragma" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "public",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:42:04 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:42:04 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "26113"
				},
				"port" : 80,
				"messageType" : "response"
			}
		}
	]
},
{
	"remediationDetail" : "The application should handle errors gracefully and prevent SQL error messages from being returned in responses. ",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"headers" : {
					"Date" : "Wed, 08 Jun 2016 16:42:05 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:42:05 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "26225",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Connection" : "close",
					"Pragma" : "public",
					"Cache-Control" : "public"
				},
				"cookies" : [],
				"protocol" : "http",
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"statusCode" : 200
			},
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/mutillidae/index.php?page=capture-data.php",
				"query" : "page=capture-data.php",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"path" : "/mutillidae/index.php",
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close",
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"Referer" : "http://www.google.com/search?hl=en&q='"
				}
			}
		},
		{
			"response" : {
				"cookies" : [],
				"headers" : {
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:42:05 GMT",
					"Date" : "Wed, 08 Jun 2016 16:42:05 GMT",
					"Content-Length" : "26047",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Type" : "text/html",
					"Logged-In-User" : "",
					"Connection" : "close",
					"Pragma" : "public",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "public"
				},
				"protocol" : "http",
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200
			},
			"messageType" : "requestResponse",
			"request" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"Referer" : "http://www.google.com/search?hl=en&q=''",
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"messageType" : "request",
				"query" : "page=capture-data.php",
				"port" : 80,
				"method" : "GET",
				"path" : "/mutillidae/index.php",
				"url" : "http://foo.com:80/mutillidae/index.php?page=capture-data.php",
				"referenceID" : 0,
				"toolFlag" : 16962
			}
		}
	],
	"remediationBackground" : "<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>\n<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>\n<ul>\n  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li><li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>\n</ul>",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>\n<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>",
	"issueDetail" : "The <b>Referer</b> HTTP header appears to be vulnerable to SQL injection attacks. A single quote was submitted in the Referer HTTP header, and a database error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message, and the application's handling of other input, to confirm whether a vulnerability is present.<br><br>The database appears to be MySQL.",
	"url" : "http://foo.com:80/mutillidae/index.php",
	"name" : "SQL injection",
	"port" : 80,
	"messageType" : "scanIssue",
	"confidence" : "Certain",
	"severity" : "High",
	"protocol" : "http",
	"issueType" : 1049088
},
{
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"request" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"path" : "/phpMyAdmin/",
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/phpMyAdmin/"
			},
			"messageType" : "requestResponse",
			"response" : {
				"messageType" : "response",
				"port" : 80,
				"headers" : {
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "3386",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:14:40 GMT",
					"Last-Modified" : "Tue, 09 Dec 2008 17:24:00 GMT",
					"Cache-Control" : "private, max-age=10800, pre-check=10800",
					"Set-Cookie" : "pmaPass-1=deleted; expires=Tue, 09-Jun-2015 16:14:41 GMT; path=/phpMyAdmin/",
					"Connection" : "close",
					"Content-Type" : "text/html; charset=utf-8",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2"
				},
				"cookies" : [
					{
						"value" : "",
						"expiration" : "Jul 8, 2016 4:14:40 PM",
						"name" : "pma_fontsize"
					},
					{
						"name" : "pma_collation_connection",
						"expiration" : "Jun 9, 2015 4:14:39 PM",
						"value" : ""
					},
					{
						"name" : "pma_theme",
						"value" : "",
						"expiration" : "Jun 9, 2015 4:14:39 PM"
					},
					{
						"value" : "",
						"expiration" : "Jun 9, 2015 4:14:41 PM",
						"name" : "pmaPass-1"
					}
				],
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200
			}
		}
	],
	"issueType" : 5245344,
	"protocol" : "http",
	"confidence" : "Firm",
	"severity" : "Information",
	"port" : 80,
	"messageType" : "scanIssue",
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/phpMyAdmin/"
},
{
	"severity" : "High",
	"confidence" : "Certain",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 3145984,
	"protocol" : "http",
	"name" : "Cleartext submission of password",
	"issueDetail" : "The page contains a form with the following action URL, which is submitted over clear-text HTTP:<ul><li>http://foo.com/phpMyAdmin/index.php</li></ul>The form contains the following password field:<ul><li>pma_password</li></ul>",
	"url" : "http://foo.com:80/phpMyAdmin/",
	"remediationBackground" : "<p>Applications should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</p>",
	"requestResponses" : [
		{
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/phpMyAdmin/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"path" : "/phpMyAdmin/",
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				}
			},
			"messageType" : "requestResponse",
			"response" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"statusCode" : 200,
				"body" : "",
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"headers" : {
					"Content-Type" : "text/html; charset=utf-8",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "private, max-age=10800, pre-check=10800",
					"Set-Cookie" : "pmaPass-1=deleted; expires=Tue, 09-Jun-2015 16:14:41 GMT; path=/phpMyAdmin/",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:14:40 GMT",
					"Last-Modified" : "Tue, 09 Dec 2008 17:24:00 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "3386"
				},
				"cookies" : [
					{
						"value" : "",
						"expiration" : "Jul 8, 2016 4:14:40 PM",
						"name" : "pma_fontsize"
					},
					{
						"expiration" : "Jun 9, 2015 4:14:39 PM",
						"value" : "",
						"name" : "pma_collation_connection"
					},
					{
						"expiration" : "Jun 9, 2015 4:14:39 PM",
						"value" : "",
						"name" : "pma_theme"
					},
					{
						"value" : "",
						"expiration" : "Jun 9, 2015 4:14:41 PM",
						"name" : "pmaPass-1"
					}
				],
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML"
			}
		}
	],
	"inScope" : true,
	"issueBackground" : "<p>Some applications transmit passwords over unencrypted connections, making them vulnerable to interception. To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>\n<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>",
	"host" : "foo.com"
},
{
	"requestResponses" : [
		{
			"response" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200,
				"port" : 80,
				"messageType" : "response",
				"headers" : {
					"Connection" : "close",
					"Content-Type" : "text/html; charset=utf-8",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "private, max-age=10800, pre-check=10800",
					"Set-Cookie" : "pmaPass-1=deleted; expires=Tue, 09-Jun-2015 16:14:41 GMT; path=/phpMyAdmin/",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:14:40 GMT",
					"Last-Modified" : "Tue, 09 Dec 2008 17:24:00 GMT",
					"Content-Length" : "3386",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10"
				},
				"cookies" : [
					{
						"value" : "",
						"expiration" : "Jul 8, 2016 4:14:40 PM",
						"name" : "pma_fontsize"
					},
					{
						"name" : "pma_collation_connection",
						"value" : "",
						"expiration" : "Jun 9, 2015 4:14:39 PM"
					},
					{
						"name" : "pma_theme",
						"expiration" : "Jun 9, 2015 4:14:39 PM",
						"value" : ""
					},
					{
						"expiration" : "Jun 9, 2015 4:14:41 PM",
						"value" : "",
						"name" : "pmaPass-1"
					}
				],
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML"
			},
			"messageType" : "requestResponse",
			"request" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"protocol" : "http",
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"path" : "/phpMyAdmin/",
				"url" : "http://foo.com:80/phpMyAdmin/",
				"referenceID" : 0,
				"toolFlag" : 16962
			}
		}
	],
	"remediationBackground" : "<p>Applications should use an alternative mechanism for transmitting session tokens, such as HTTP cookies or hidden fields in forms that are submitted using the POST method.</p>",
	"issueBackground" : "<p>Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing session tokens into the URL increases the risk that they will be captured by an attacker.</p>",
	"inScope" : true,
	"host" : "foo.com",
	"url" : "http://foo.com:80/phpMyAdmin/",
	"issueDetail" : "The response contains the following links that appear to contain session tokens:<ul><li>http://foo.com/phpMyAdmin/phpmyadmin.css.php?token=807736aa6512a58515dfa98a8a860cd0&amp;js_frame=right&amp;nocache=2457687151</li></ul>",
	"name" : "Session token in URL",
	"messageType" : "scanIssue",
	"port" : 80,
	"confidence" : "Firm",
	"severity" : "Medium",
	"protocol" : "http",
	"issueType" : 5244672
},
{
	"name" : "Path-relative style sheet import",
	"url" : "http://foo.com:80/phpMyAdmin/",
	"issueDetail" : "The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The first four conditions for an exploitable vulnerability are present (see issue background):<ol><li>The original response contains a path-relative style sheet import (see response 1).</li><li>When superfluous path-like data is placed into the URL following the original filename (see request 2), the application's response still contains a path-relative style sheet import (see response 2).</li><li>Response 2 can be made to render in a browser's quirks mode. Although the page contains a modern doctype directive, the response does not prevent itself from being framed. An attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.)</li><li>When the path-relative style sheet import in response 2 is requested (see request 3) the application returns something other than the CSS response that was supposed to be imported (see response 3).</li></ol>It was not verified whether condition 5 holds (see issue background), and you should manually investigate whether it is possible to manipulate some text within response 3, to enable full exploitation of this issue.",
	"confidence" : "Firm",
	"severity" : "Information",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 2097960,
	"protocol" : "http",
	"remediationBackground" : "<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\n<ul><li>Setting the HTTP response header \"X-Frame-Options: deny\" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. \"&lt;!doctype html&gt;\") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\n<li>Setting the HTTP response header \"X-Content-Type-Options: no sniff\" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"headers" : {
					"Cache-Control" : "private, max-age=10800, pre-check=10800",
					"Set-Cookie" : "pmaPass-1=deleted; expires=Tue, 09-Jun-2015 16:14:41 GMT; path=/phpMyAdmin/",
					"Connection" : "close",
					"Content-Type" : "text/html; charset=utf-8",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Length" : "3386",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:14:40 GMT",
					"Last-Modified" : "Tue, 09 Dec 2008 17:24:00 GMT"
				},
				"cookies" : [
					{
						"name" : "pma_fontsize",
						"expiration" : "Jul 8, 2016 4:14:40 PM",
						"value" : ""
					},
					{
						"value" : "",
						"expiration" : "Jun 9, 2015 4:14:39 PM",
						"name" : "pma_collation_connection"
					},
					{
						"expiration" : "Jun 9, 2015 4:14:39 PM",
						"value" : "",
						"name" : "pma_theme"
					},
					{
						"name" : "pmaPass-1",
						"value" : "",
						"expiration" : "Jun 9, 2015 4:14:41 PM"
					}
				],
				"port" : 80,
				"messageType" : "response",
				"statusCode" : 200,
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			},
			"request" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"protocol" : "http",
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"path" : "/phpMyAdmin/",
				"url" : "http://foo.com:80/phpMyAdmin/",
				"toolFlag" : 16962,
				"referenceID" : 0
			}
		},
		{
			"request" : {
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/phpMyAdmin/index.php/c55d3b/",
				"path" : "/phpMyAdmin/index.php/c55d3b/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Cookie" : "security=high; PHPSESSID=249765abfd585ca77e86618061301bcb; pma_lang=en-utf-8; pma_charset=utf-8; phpMyAdmin=341e7db8c9772a3e39375898f4e00012def8411b; pmaUser-1=lAW7U03Hg%2F89fmdg4AsDTA%3D%3D; showhints=1",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"protocol" : "http",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com"
			},
			"messageType" : "requestResponse",
			"response" : {
				"headers" : {
					"Last-Modified" : "Tue, 09 Dec 2008 17:24:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:16:45 GMT",
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Content-Length" : "3283",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html; charset=utf-8",
					"Connection" : "close",
					"Set-Cookie" : "pma_theme=original; expires=Fri, 08-Jul-2016 16:16:45 GMT; path=/phpMyAdmin/; httponly",
					"Cache-Control" : "private, max-age=10800, pre-check=10800"
				},
				"cookies" : [
					{
						"name" : "pma_fontsize",
						"value" : "",
						"expiration" : "Jul 8, 2016 4:16:45 PM"
					},
					{
						"name" : "pma_collation_connection",
						"value" : "",
						"expiration" : "Jun 9, 2015 4:16:44 PM"
					},
					{
						"name" : "pma_theme",
						"value" : "",
						"expiration" : "Jul 8, 2016 4:16:45 PM"
					}
				],
				"protocol" : "http",
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200
			}
		},
		{
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"url" : "http://foo.com:80/phpMyAdmin/index.php/c55d3b/phpmyadmin.css.php?token=807736aa6512a58515dfa98a8a860cd0&js_frame=right&nocache=2457687151",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"Cookie" : "security=high; PHPSESSID=249765abfd585ca77e86618061301bcb; pma_lang=en-utf-8; pma_charset=utf-8; phpMyAdmin=341e7db8c9772a3e39375898f4e00012def8411b; pmaUser-1=lAW7U03Hg%2F89fmdg4AsDTA%3D%3D; showhints=1",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"port" : 80,
				"messageType" : "request",
				"query" : "token=807736aa6512a58515dfa98a8a860cd0&js_frame=right&nocache=2457687151",
				"method" : "GET",
				"path" : "/phpMyAdmin/index.php/c55d3b/phpmyadmin.css.php"
			},
			"response" : {
				"body" : "",
				"statusCode" : 200,
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"cookies" : [
					{
						"name" : "pma_fontsize",
						"expiration" : "Jul 8, 2016 4:16:46 PM",
						"value" : ""
					},
					{
						"name" : "pma_collation_connection",
						"value" : "",
						"expiration" : "Jun 9, 2015 4:16:45 PM"
					},
					{
						"value" : "",
						"expiration" : "Jul 8, 2016 4:16:46 PM",
						"name" : "pma_theme"
					}
				],
				"headers" : {
					"Expires" : "Thu, 19 Nov 1981 08:52:00 GMT",
					"Last-Modified" : "Tue, 09 Dec 2008 17:24:00 GMT",
					"Date" : "Wed, 08 Jun 2016 16:16:46 GMT",
					"Content-Length" : "3283",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Connection" : "close",
					"Content-Type" : "text/html; charset=utf-8",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-Control" : "private, max-age=10800, pre-check=10800",
					"Set-Cookie" : "pma_theme=original; expires=Fri, 08-Jul-2016 16:16:46 GMT; path=/phpMyAdmin/; httponly"
				},
				"protocol" : "http",
				"port" : 80,
				"messageType" : "response"
			},
			"messageType" : "requestResponse"
		}
	],
	"issueBackground" : "<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\n<ol>\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at \"/original-path/file.php\" might import \"styles/main.css\").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, \"/original-path/file.php/extra-junk/\"). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL \"/original-path/file.php/extra-junk/styles/main.css\"), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\n<ul>\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>",
	"inScope" : true,
	"host" : "foo.com"
},
{
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"statusCode" : 200,
				"body" : "",
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"headers" : {
					"Set-Cookie" : "pma_fontsize=deleted; expires=Tue, 09-Jun-2015 16:34:35 GMT; path=/phpMyAdmin/",
					"Cache-Control" : "private, max-age=10800, pre-check=10800",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/css; charset=UTF-8",
					"Content-Length" : "21389",
					"X-Powered-By" : "PHP/5.2.4-2ubuntu5.10",
					"Date" : "Wed, 08 Jun 2016 16:34:36 GMT",
					"Last-Modified" : "Tue, 09 Dec 2008 17:24:00 GMT",
					"Expires" : "Wed, 08 Jun 2016 17:34:36 GMT"
				},
				"cookies" : [
					{
						"value" : "",
						"expiration" : "Jun 9, 2015 4:34:35 PM",
						"name" : "pma_fontsize"
					}
				],
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "CSS"
			},
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/phpMyAdmin/phpmyadmin.css.php?lang=en-utf-8&convcharset=utf-8&token=c7ecdddd196d662776002e893f5314c5&js_frame=right&nocache=2457687151",
				"query" : "lang=en-utf-8&convcharset=utf-8&token=c7ecdddd196d662776002e893f5314c5&js_frame=right&nocache=2457687151",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"path" : "/phpMyAdmin/phpmyadmin.css.php",
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				}
			}
		}
	],
	"remediationBackground" : "<p>Applications should use an alternative mechanism for transmitting session tokens, such as HTTP cookies or hidden fields in forms that are submitted using the POST method.</p>",
	"inScope" : true,
	"issueBackground" : "<p>Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing session tokens into the URL increases the risk that they will be captured by an attacker.</p>",
	"host" : "foo.com",
	"severity" : "Medium",
	"confidence" : "Firm",
	"port" : 80,
	"messageType" : "scanIssue",
	"issueType" : 5244672,
	"protocol" : "http",
	"name" : "Session token in URL",
	"issueDetail" : "The URL in the request appears to contain a session token within the query string:<ul><li>http://foo.com/phpMyAdmin/phpmyadmin.css.php?lang=en-utf-8&amp;convcharset=utf-8&amp;token=c7ecdddd196d662776002e893f5314c5&amp;js_frame=right&amp;nocache=2457687151</li></ul>",
	"url" : "http://foo.com:80/phpMyAdmin/phpmyadmin.css.php"
},
{
	"url" : "http://foo.com:80/twiki/",
	"name" : "Frameable response (potential Clickjacking)",
	"protocol" : "http",
	"issueType" : 5245344,
	"messageType" : "scanIssue",
	"port" : 80,
	"confidence" : "Firm",
	"severity" : "Information",
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"requestResponses" : [
		{
			"response" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"statusCode" : 200,
				"body" : "",
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"X-Pad" : "avoid browser bug",
					"Accept-Ranges" : "bytes",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Content-Length" : "782",
					"ETag" : "",
					"Date" : "Wed, 08 Jun 2016 16:14:18 GMT",
					"Last-Modified" : "Sun, 05 Jan 2003 01:22:55 GMT"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML"
			},
			"messageType" : "requestResponse",
			"request" : {
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/twiki/",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"path" : "/twiki/",
				"protocol" : "http",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			}
		}
	],
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>"
},
{
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/twiki/TWikiDocumentation.html",
	"issueType" : 5245344,
	"protocol" : "http",
	"confidence" : "Firm",
	"severity" : "Information",
	"port" : 80,
	"messageType" : "scanIssue",
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"inScope" : true,
	"host" : "foo.com",
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"body" : "",
				"statusCode" : 200,
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"cookies" : [],
				"headers" : {
					"ETag" : "",
					"Content-Length" : "453477",
					"Date" : "Wed, 08 Jun 2016 16:35:42 GMT",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:14 GMT",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Accept-Ranges" : "bytes",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2"
				},
				"protocol" : "http",
				"port" : 80,
				"messageType" : "response"
			},
			"request" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"messageType" : "request",
				"method" : "GET",
				"query" : "createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"port" : 80,
				"path" : "/twiki/TWikiDocumentation.html",
				"protocol" : "http",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/twiki/TWikiDocumentation.html?createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties"
			}
		}
	]
},
{
	"name" : "Cleartext submission of password",
	"url" : "http://foo.com:80/twiki/TWikiDocumentation.html",
	"issueDetail" : "The page contains a form with the following action URL, which is submitted over clear-text HTTP:<ul><li>http://twiki.org/cgi-bin/passwd/TWiki/WebHome</li></ul>The form contains the following password fields:<ul><li>oldpassword</li><li>password</li><li>passwordA</li></ul>",
	"issueType" : 3145984,
	"protocol" : "http",
	"confidence" : "Certain",
	"severity" : "High",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueBackground" : "<p>Some applications transmit passwords over unencrypted connections, making them vulnerable to interception. To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>\n<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>",
	"inScope" : true,
	"host" : "foo.com",
	"remediationBackground" : "<p>Applications should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</p>",
	"requestResponses" : [
		{
			"request" : {
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"protocol" : "http",
				"path" : "/twiki/TWikiDocumentation.html",
				"port" : 80,
				"messageType" : "request",
				"method" : "GET",
				"query" : "createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"url" : "http://foo.com:80/twiki/TWikiDocumentation.html?createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : ""
			},
			"response" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : "",
				"protocol" : "http",
				"headers" : {
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Accept-Ranges" : "bytes",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:14 GMT",
					"Date" : "Wed, 08 Jun 2016 16:35:42 GMT",
					"Content-Length" : "453477",
					"ETag" : ""
				},
				"cookies" : [],
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0
			},
			"messageType" : "requestResponse"
		}
	]
},
{
	"protocol" : "http",
	"issueType" : 5244928,
	"messageType" : "scanIssue",
	"port" : 80,
	"confidence" : "Certain",
	"severity" : "Low",
	"issueDetail" : "The page contains a form with the following action URL:<ul><li>http://twiki.org/cgi-bin/passwd/TWiki/WebHome</li></ul>The form contains the following password fields with autocomplete enabled:<ul><li>oldpassword</li><li>password</li><li>passwordA</li></ul>",
	"url" : "http://foo.com:80/twiki/TWikiDocumentation.html",
	"name" : "Password field with autocomplete enabled",
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>Most browsers have a facility to remember user credentials that are entered into HTML forms. This function can be configured by the user and also by applications that employ user credentials. If the function is enabled, then credentials entered by the user are stored on their local computer and retrieved by the browser on future visits to the same application.</p>\n<p>The stored credentials can be captured by an attacker who gains control over the user's computer. Further, an attacker who finds a separate application vulnerability such as cross-site scripting may be able to exploit this to retrieve a user's browser-stored credentials. </p>",
	"remediationBackground" : "<p>To prevent browsers from storing credentials entered into HTML forms, include the attribute <b>autocomplete=\"off\"</b> within the FORM tag (to protect all form fields) or within the relevant INPUT tags (to protect specific individual fields).</p>\n<p>Please note that modern web browsers may ignore this directive. In spite of this there is a chance that not disabling autocomplete may cause problems obtaining PCI compliance.</p>",
	"requestResponses" : [
		{
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"url" : "http://foo.com:80/twiki/TWikiDocumentation.html?createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"protocol" : "http",
				"path" : "/twiki/TWikiDocumentation.html",
				"messageType" : "request",
				"method" : "GET",
				"query" : "createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"port" : 80
			},
			"response" : {
				"protocol" : "http",
				"headers" : {
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Accept-Ranges" : "bytes",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:14 GMT",
					"Date" : "Wed, 08 Jun 2016 16:35:42 GMT",
					"ETag" : "",
					"Content-Length" : "453477"
				},
				"cookies" : [],
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : ""
			},
			"messageType" : "requestResponse"
		}
	]
},
{
	"requestResponses" : [
		{
			"response" : {
				"headers" : {
					"Content-Length" : "453477",
					"ETag" : "",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:14 GMT",
					"Date" : "Wed, 08 Jun 2016 16:35:42 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Accept-Ranges" : "bytes",
					"Content-Type" : "text/html",
					"Connection" : "close"
				},
				"cookies" : [],
				"protocol" : "http",
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"body" : "",
				"statusCode" : 200
			},
			"messageType" : "requestResponse",
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"url" : "http://foo.com:80/twiki/TWikiDocumentation.html?createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				},
				"query" : "createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"path" : "/twiki/TWikiDocumentation.html"
			}
		}
	],
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>Applications sometimes use POST requests to transfer sensitive information from one domain to another. This does not necessarily constitute a security vulnerability, but it creates a trust relationship between the two domains. Data transmitted between domains should be reviewed to determine whether the originating application should be trusting the receiving domain with this information.</p>",
	"severity" : "Information",
	"confidence" : "Certain",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 4195584,
	"protocol" : "http",
	"name" : "Cross-domain POST",
	"url" : "http://foo.com:80/twiki/TWikiDocumentation.html",
	"issueDetail" : "The page contains a form which POSTs data to the domain <b>twiki.org</b>. The form contains the following fields:<ul><li>username</li><li>oldpassword</li><li>password</li><li>passwordA</li><li>TopicName</li><li>change</li></ul>"
},
{
	"remediationBackground" : "<p>Applications should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</p>",
	"requestResponses" : [
		{
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/twiki/TWikiDocumentation.html?createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"path" : "/twiki/TWikiDocumentation.html",
				"port" : 80,
				"messageType" : "request",
				"query" : "createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"method" : "GET",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http"
			},
			"messageType" : "requestResponse",
			"response" : {
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Accept-Ranges" : "bytes",
					"Content-Length" : "453477",
					"ETag" : "",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:14 GMT",
					"Date" : "Wed, 08 Jun 2016 16:35:42 GMT"
				},
				"messageType" : "response",
				"port" : 80,
				"statusCode" : 200,
				"body" : "",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com"
			}
		}
	],
	"issueBackground" : "<p>Some applications transmit passwords over unencrypted connections, making them vulnerable to interception. To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>\n<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>",
	"inScope" : true,
	"host" : "foo.com",
	"name" : "Cleartext submission of password",
	"url" : "http://foo.com:80/twiki/TWikiDocumentation.html",
	"issueDetail" : "The page contains a form with the following action URL, which is submitted over clear-text HTTP:<ul><li>http://twiki.org/cgi-bin/passwd/Main/WebHome</li></ul>The form contains the following password fields:<ul><li>password</li><li>passwordA</li></ul>",
	"confidence" : "Certain",
	"severity" : "High",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueType" : 3145984,
	"protocol" : "http"
},
{
	"issueType" : 5244928,
	"protocol" : "http",
	"severity" : "Low",
	"confidence" : "Certain",
	"messageType" : "scanIssue",
	"port" : 80,
	"name" : "Password field with autocomplete enabled",
	"issueDetail" : "The page contains a form with the following action URL:<ul><li>http://twiki.org/cgi-bin/passwd/Main/WebHome</li></ul>The form contains the following password fields with autocomplete enabled:<ul><li>password</li><li>passwordA</li></ul>",
	"url" : "http://foo.com:80/twiki/TWikiDocumentation.html",
	"inScope" : true,
	"issueBackground" : "<p>Most browsers have a facility to remember user credentials that are entered into HTML forms. This function can be configured by the user and also by applications that employ user credentials. If the function is enabled, then credentials entered by the user are stored on their local computer and retrieved by the browser on future visits to the same application.</p>\n<p>The stored credentials can be captured by an attacker who gains control over the user's computer. Further, an attacker who finds a separate application vulnerability such as cross-site scripting may be able to exploit this to retrieve a user's browser-stored credentials. </p>",
	"host" : "foo.com",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : "",
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Date" : "Wed, 08 Jun 2016 16:35:42 GMT",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:14 GMT",
					"Content-Length" : "453477",
					"ETag" : "",
					"Accept-Ranges" : "bytes",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html",
					"Connection" : "close"
				},
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962
			},
			"request" : {
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/twiki/TWikiDocumentation.html?createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"path" : "/twiki/TWikiDocumentation.html",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"query" : "createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"protocol" : "http",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			}
		}
	],
	"remediationBackground" : "<p>To prevent browsers from storing credentials entered into HTML forms, include the attribute <b>autocomplete=\"off\"</b> within the FORM tag (to protect all form fields) or within the relevant INPUT tags (to protect specific individual fields).</p>\n<p>Please note that modern web browsers may ignore this directive. In spite of this there is a chance that not disabling autocomplete may cause problems obtaining PCI compliance.</p>"
},
{
	"protocol" : "http",
	"issueType" : 4195584,
	"port" : 80,
	"messageType" : "scanIssue",
	"confidence" : "Certain",
	"severity" : "Information",
	"issueDetail" : "The page contains a form which POSTs data to the domain <b>twiki.org</b>. The form contains the following fields:<ul><li>username</li><li>password</li><li>passwordA</li><li>TopicName</li></ul>",
	"url" : "http://foo.com:80/twiki/TWikiDocumentation.html",
	"name" : "Cross-domain POST",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>Applications sometimes use POST requests to transfer sensitive information from one domain to another. This does not necessarily constitute a security vulnerability, but it creates a trust relationship between the two domains. Data transmitted between domains should be reviewed to determine whether the originating application should be trusting the receiving domain with this information.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"messageType" : "response",
				"port" : 80,
				"cookies" : [],
				"headers" : {
					"Content-Length" : "453477",
					"ETag" : "",
					"Date" : "Wed, 08 Jun 2016 16:35:42 GMT",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:14 GMT",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Accept-Ranges" : "bytes",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2"
				},
				"protocol" : "http",
				"body" : "",
				"statusCode" : 200,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com"
			},
			"request" : {
				"path" : "/twiki/TWikiDocumentation.html",
				"port" : 80,
				"messageType" : "request",
				"method" : "GET",
				"query" : "createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/twiki/TWikiDocumentation.html?createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"httpVersion" : "HTTP/1.1"
			}
		}
	]
},
{
	"requestResponses" : [
		{
			"response" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200,
				"cookies" : [],
				"headers" : {
					"ETag" : "",
					"Content-Length" : "453477",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:14 GMT",
					"Date" : "Wed, 08 Jun 2016 16:35:42 GMT",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Accept-Ranges" : "bytes"
				},
				"protocol" : "http",
				"port" : 80,
				"messageType" : "response",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962
			},
			"messageType" : "requestResponse",
			"request" : {
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/twiki/TWikiDocumentation.html?createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"path" : "/twiki/TWikiDocumentation.html",
				"messageType" : "request",
				"port" : 80,
				"query" : "createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"method" : "GET",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com"
			}
		}
	],
	"issueBackground" : "<p>Applications sometimes use POST requests to transfer sensitive information from one domain to another. This does not necessarily constitute a security vulnerability, but it creates a trust relationship between the two domains. Data transmitted between domains should be reviewed to determine whether the originating application should be trusting the receiving domain with this information.</p>",
	"inScope" : true,
	"host" : "foo.com",
	"messageType" : "scanIssue",
	"port" : 80,
	"confidence" : "Certain",
	"severity" : "Information",
	"protocol" : "http",
	"issueType" : 4195584,
	"url" : "http://foo.com:80/twiki/TWikiDocumentation.html",
	"issueDetail" : "The page contains a form which POSTs data to the domain <b>twiki.org</b>. The form contains the following fields:<ul><li>newweb</li><li>baseweb</li><li>baseweb</li><li>baseweb</li><li>baseweb</li><li>baseweb</li><li>webbgcolor</li><li>sitemapwhat</li><li>sitemapuseto</li><li>nosearchall</li><li>nosearchall</li><li>newtopic</li><li>action</li></ul>",
	"name" : "Cross-domain POST"
},
{
	"issueBackground" : "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
	"inScope" : true,
	"host" : "foo.com",
	"remediationBackground" : "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200,
				"port" : 80,
				"messageType" : "response",
				"cookies" : [],
				"headers" : {
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:14 GMT",
					"Date" : "Wed, 08 Jun 2016 16:35:42 GMT",
					"ETag" : "",
					"Content-Length" : "453477",
					"Connection" : "close",
					"Content-Type" : "text/html",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Accept-Ranges" : "bytes"
				},
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML"
			},
			"request" : {
				"path" : "/twiki/TWikiDocumentation.html",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"query" : "createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/twiki/TWikiDocumentation.html?createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"body" : "",
				"httpVersion" : "HTTP/1.1"
			}
		}
	],
	"name" : "Cross-domain Referer leakage",
	"issueDetail" : "The page was loaded from a URL containing a query string:<ul><li>http://foo.com/twiki/TWikiDocumentation.html?createlink=on&amp;hidefile=on&amp;filename=Sample.txt&amp;filepath=C%253a%255cDATA%255cSample.txt&amp;filecomment=Just%2ba%2bsample&amp;changeproperties=Change%2bproperties</li></ul>The response contains the following links to other domains:<ul><li>http://cygwin.com/</li><li>http://cygwin.com/cygwin-ug-net/cygwin-ug-net.html</li><li>http://cygwin.com/cygwin-ug-net/using-textbinary.html</li><li>http://cygwin.com/faq/faq.html</li><li>http://download.cnet.com/downloads/0-4003619-100-904159.html?tag=st.dl.10001-103-1.lst-7-1.904159</li><li>http://gnu.org/</li><li>http://httpd.apache.org/</li><li>http://httpd.apache.org/dist/httpd/binaries/win32/</li><li>http://httpd.apache.org/docs/mod/core.html</li><li>http://httpd.apache.org/docs/win_service.html</li><li>http://httpd.apache.org/docs/windows.html</li><li>http://twiki.org/</li><li>http://twiki.org/cgi-bin/attach/TWiki/FileAttachment?filename=Sample.txt&amp;revInfo=1</li><li>http://twiki.org/cgi-bin/attach/TWiki/FileAttachment?filename=Smile.gif&amp;revInfo=1</li><li>http://twiki.org/cgi-bin/edit/Main/MartinRaabe?topicparent=TWiki.TWikiDocumentation</li><li>http://twiki.org/cgi-bin/edit/TWiki/NewTopic?topicparent=TWiki.TWikiDocumentation</li><li>http://twiki.org/cgi-bin/edit/TWiki/NotExistingYet?topicparent=TWiki.TWikiDocumentation</li><li>http://twiki.org/cgi-bin/rename/TWiki/FileAttachment?attachment=Sample.txt</li><li>http://twiki.org/cgi-bin/view/Codev</li><li>http://twiki.org/cgi-bin/view/Codev.ActivePerl</li><li>http://twiki.org/cgi-bin/view/Codev.ActiveState</li><li>http://twiki.org/cgi-bin/view/Codev.ChangePasswordOnWin2K</li><li>http://twiki.org/cgi-bin/view/Codev.CookbookActivePerlSetup</li><li>http://twiki.org/cgi-bin/view/Codev.CookbookActivePerlTestenv</li><li>http://twiki.org/cgi-bin/view/Codev.CookbookLineEndingProblems</li><li>http://twiki.org/cgi-bin/view/Codev.CygWin</li><li>http://twiki.org/cgi-bin/view/Codev.DocRequest</li><li>http://twiki.org/cgi-bin/view/Codev.DocsToDo</li><li>http://twiki.org/cgi-bin/view/Codev.FeatureBrainstorming</li><li>http://twiki.org/cgi-bin/view/Codev.FeatureDocumented</li><li>http://twiki.org/cgi-bin/view/Codev.FeatureDone</li><li>http://twiki.org/cgi-bin/view/Codev.FeatureEnhancementRequest</li><li>http://twiki.org/cgi-bin/view/Codev.FeatureToDo</li><li>http://twiki.org/cgi-bin/view/Codev.FeatureUnderConstruction</li><li>http://twiki.org/cgi-bin/view/Codev.ForgettingPasswords</li><li>http://twiki.org/cgi-bin/view/Codev.GettingTheUsernameWrong</li><li>http://twiki.org/cgi-bin/view/Codev.InternetExplorer</li><li>http://twiki.org/cgi-bin/view/Codev.ModPerl</li><li>http://twiki.org/cgi-bin/view/Codev.OpenSource</li><li>http://twiki.org/cgi-bin/view/Codev.RcsLite</li><li>http://twiki.org/cgi-bin/view/Codev.ReadWriteOfflineWiki</li><li>http://twiki.org/cgi-bin/view/Codev.ReadmeFirst</li><li>http://twiki.org/cgi-bin/view/Codev.TWikiAlphaRelease</li><li>http://twiki.org/cgi-bin/view/Codev.TWikiOn</li><li>http://twiki.org/cgi-bin/view/Codev.TWikiOnWindows</li><li>http://twiki.org/cgi-bin/view/Codev.TWikiOnWindowsArchive</li><li>http://twiki.org/cgi-bin/view/Codev.TWikiOnWindowsKnownConfigurations</li><li>http://twiki.org/cgi-bin/view/Codev.TWikiPatches</li><li>http://twiki.org/cgi-bin/view/Codev.UsingPerl58OnRedHat8</li><li>http://twiki.org/cgi-bin/view/Codev.WindowsInstallCookbookComments</li><li>http://twiki.org/cgi-bin/view/Codev.WindowsInstallModNTLM</li><li>http://twiki.org/cgi-bin/view/Codev.WindowsModPerlInstallCookbook</li><li>http://twiki.org/cgi-bin/view/Codev/AttachedNotificationLinksBug</li><li>http://twiki.org/cgi-bin/view/Codev/AuthenticationBasedOnGroups</li><li>http://twiki.org/cgi-bin/view/Codev/BetterTWikiTagTemplateProcessing</li><li>http://twiki.org/cgi-bin/view/Codev/CairoRelease</li><li>http://twiki.org/cgi-bin/view/Codev/CreateLinkToAttachedFileBug</li><li>http://twiki.org/cgi-bin/view/Codev/FileAttachmentFilterSecurityAlert</li><li>http://twiki.org/cgi-bin/view/Codev/IncludeHandlingImprovements</li><li>http://twiki.org/cgi-bin/view/Codev/KnownIssuesOfTWiki01Feb2003</li><li>http://twiki.org/cgi-bin/view/Codev/RcsLite</li><li>http://twiki.org/cgi-bin/view/Codev/TWikiOn</li><li>http://twiki.org/cgi-bin/view/Codev/TWikiOnLinux</li><li>http://twiki.org/cgi-bin/view/Codev/TWikiOnMacOSX</li><li>http://twiki.org/cgi-bin/view/Codev/TWikiOnSourceForge</li><li>http://twiki.org/cgi-bin/view/Codev/TWikiOnUnix</li><li>http://twiki.org/cgi-bin/view/Codev/TWikiSkins</li><li>http://twiki.org/cgi-bin/view/Codev/UppercaseAttachments</li><li>http://twiki.org/cgi-bin/view/Know/IncorrectDllVersionW32PTH10DLL</li><li>http://twiki.org/cgi-bin/view/Know/NoDisclosure</li><li>http://twiki.org/cgi-bin/view/Know/OperatingSystem</li><li>http://twiki.org/cgi-bin/view/Know/OsHPUX</li><li>http://twiki.org/cgi-bin/view/Know/OsLinux</li><li>http://twiki.org/cgi-bin/view/Know/OsSolaris</li><li>http://twiki.org/cgi-bin/view/Know/OsVersion</li><li>http://twiki.org/cgi-bin/view/Know/OsWin</li><li>http://twiki.org/cgi-bin/view/Know/PublicFAQ</li><li>http://twiki.org/cgi-bin/view/Know/PublicSupported</li><li>http://twiki.org/cgi-bin/view/Know/ReadmeFirst</li><li>http://twiki.org/cgi-bin/view/Know/TopicClassification</li><li>http://twiki.org/cgi-bin/view/Know/WinDoze95Crash</li><li>http://twiki.org/cgi-bin/view/Main</li><li>http://twiki.org/cgi-bin/view/Main.BerndSchiffer</li><li>http://twiki.org/cgi-bin/view/Main.ChrisKeith</li><li>http://twiki.org/cgi-bin/view/Main.DavidLeBlanc</li><li>http://twiki.org/cgi-bin/view/Main.DavideBaroncelli</li><li>http://twiki.org/cgi-bin/view/Main.JerryWard</li><li>http://twiki.org/cgi-bin/view/Main.MartinWittmann</li><li>http://twiki.org/cgi-bin/view/Main.MaryDeMarco</li><li>http://twiki.org/cgi-bin/view/Main.MattWilkie</li><li>http://twiki.org/cgi-bin/view/Main.MikeBytnar</li><li>http://twiki.org/cgi-bin/view/Main.RossC</li><li>http://twiki.org/cgi-bin/view/Main.VictorGoh</li><li>http://twiki.org/cgi-bin/view/Main.WolframJahn</li><li>http://twiki.org/cgi-bin/view/Main/DavidLeBlanc</li><li>http://twiki.org/cgi-bin/view/Main/GrantBow</li><li>http://twiki.org/cgi-bin/view/Main/MikeMannix</li><li>http://twiki.org/cgi-bin/view/Main/OfficeLocations</li><li>http://twiki.org/cgi-bin/view/Main/PeterThoeny</li><li>http://twiki.org/cgi-bin/view/Main/PoweredByTWikiLogo</li><li>http://twiki.org/cgi-bin/view/Main/RichardDonkin</li><li>http://twiki.org/cgi-bin/view/Main/TWikiAdminGroup</li><li>http://twiki.org/cgi-bin/view/Main/TWikiGroups</li><li>http://twiki.org/cgi-bin/view/Main/TWikiGuest</li><li>http://twiki.org/cgi-bin/view/Main/TWikiUsers</li><li>http://twiki.org/cgi-bin/view/Main/WebHome</li><li>http://twiki.org/cgi-bin/view/Plugins</li><li>http://twiki.org/cgi-bin/view/Plugins.TablePlugin</li><li>http://twiki.org/cgi-bin/view/Plugins/GenHTMLAddon</li><li>http://twiki.org/cgi-bin/view/Plugins/PluginPackage</li><li>http://twiki.org/cgi-bin/view/Plugins/SkinPackagingHowTo</li><li>http://twiki.org/cgi-bin/view/Plugins/SpreadSheetPlugin</li><li>http://twiki.org/cgi-bin/view/Support</li><li>http://twiki.org/cgi-bin/view/Support.FailedAuthenticationWithApache2OnWinNT</li><li>http://twiki.org/cgi-bin/view/Support.InstallDigestSHA1Fails</li><li>http://twiki.org/cgi-bin/view/Support.TwikiOnWindowsBinaryAttachments</li><li>http://twiki.org/cgi-bin/view/TWiki</li><li>http://twiki.org/cgi-bin/view/TWiki/AdminSkillsAssumptions</li><li>http://twiki.org/cgi-bin/view/TWiki/AlWilliams</li><li>http://twiki.org/cgi-bin/view/TWiki/AndreaSterbini</li><li>http://twiki.org/cgi-bin/view/TWiki/AppendixFileSystem</li><li>http://twiki.org/cgi-bin/view/TWiki/BookView</li><li>http://twiki.org/cgi-bin/view/TWiki/ChangePassword</li><li>http://twiki.org/cgi-bin/view/TWiki/ChristopheVermeulen</li><li>http://twiki.org/cgi-bin/view/TWiki/ColasNahaboo</li><li>http://twiki.org/cgi-bin/view/TWiki/CrisBailiff</li><li>http://twiki.org/cgi-bin/view/TWiki/DavidWarman</li><li>http://twiki.org/cgi-bin/view/TWiki/DefaultPlugin</li><li>http://twiki.org/cgi-bin/view/TWiki/DeleteOrRenameATopic</li><li>http://twiki.org/cgi-bin/view/TWiki/DontNotify</li><li>http://twiki.org/cgi-bin/view/TWiki/EditDoesNotIncreaseTheRevision</li><li>http://twiki.org/cgi-bin/view/TWiki/EmptyPlugin</li><li>http://twiki.org/cgi-bin/view/TWiki/ExampleTopicTemplate</li><li>http://twiki.org/cgi-bin/view/TWiki/FileAttachment</li><li>http://twiki.org/cgi-bin/view/TWiki/FormattedSearch</li><li>http://twiki.org/cgi-bin/view/TWiki/GnuGeneralPublicLicense</li><li>http://twiki.org/cgi-bin/view/TWiki/GoBox</li><li>http://twiki.org/cgi-bin/view/TWiki/GoodStyle</li><li>http://twiki.org/cgi-bin/view/TWiki/HaroldGottschalk</li><li>http://twiki.org/cgi-bin/view/TWiki/IncludeTopicsAndWebPages</li><li>http://twiki.org/cgi-bin/view/TWiki/InstantEnhancements</li><li>http://twiki.org/cgi-bin/view/TWiki/InterWikis</li><li>http://twiki.org/cgi-bin/view/TWiki/InterwikiPlugin</li><li>http://twiki.org/cgi-bin/view/TWiki/JohnAltstadt</li><li>http://twiki.org/cgi-bin/view/TWiki/JohnTalintyre</li><li>http://twiki.org/cgi-bin/view/TWiki/KevinKinnell</li><li>http://twiki.org/cgi-bin/view/TWiki/KlausWriessnegger</li><li>http://twiki.org/cgi-bin/view/TWiki/MainFeatures</li><li>http://twiki.org/cgi-bin/view/TWiki/ManagingTopics</li><li>http://twiki.org/cgi-bin/view/TWiki/ManagingWebs</li><li>http://twiki.org/cgi-bin/view/TWiki/ManpreetSingh</li><li>http://twiki.org/cgi-bin/view/TWiki/MikeMannix</li><li>http://twiki.org/cgi-bin/view/TWiki/NewUserTemplate</li><li>http://twiki.org/cgi-bin/view/TWiki/NicholasLee</li><li>http://twiki.org/cgi-bin/view/TWiki/PeterFokkinga</li><li>http://twiki.org/cgi-bin/view/TWiki/PeterThoeny</li><li>http://twiki.org/cgi-bin/view/TWiki/RegularExpression</li><li>http://twiki.org/cgi-bin/view/TWiki/ResetPassword</li><li>http://twiki.org/cgi-bin/view/TWiki/RichardDonkin</li><li>http://twiki.org/cgi-bin/view/TWiki/RyanFreebern</li><li>http://twiki.org/cgi-bin/view/TWiki/SearchDoesNotWork</li><li>http://twiki.org/cgi-bin/view/TWiki/SimultaneousEdits</li><li>http://twiki.org/cgi-bin/view/TWiki/SiteMap</li><li>http://twiki.org/cgi-bin/view/TWiki/StandardColors</li><li>http://twiki.org/cgi-bin/view/TWiki/StanleyKnutson</li><li>http://twiki.org/cgi-bin/view/TWiki/StartingPoints</li><li>http://twiki.org/cgi-bin/view/TWiki/SvenDowideit</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiAccessControl</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiDocGraphics</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiDownload</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiEnhancementRequests</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiFAQ</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiFaqTemplate</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiForms</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiFuncModule</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiGlossary</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiHistory</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiInstallationGuide</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiMetaData</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiMetaData?raw=debug</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiPlannedFeatures</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiPlugins</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiPreferences</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiRegistration</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiRegistrationPub</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiSite</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiSiteTools</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiSkins</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiSkins?skin=plain</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiSkins?skin=print</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiSystemRequirements</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiTemplates</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiTopics</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiTutorial</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiUpgradeGuide</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiUpgradeTo01Dec2000</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiUpgradeTo01Dec2001</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiUserAuthentication</li><li>http://twiki.org/cgi-bin/view/TWiki/TWikiVariables</li><li>http://twiki.org/cgi-bin/view/TWiki/TablePlugin</li><li>http://twiki.org/cgi-bin/view/TWiki/TemplateWeb</li><li>http://twiki.org/cgi-bin/view/TWiki/TextFormattingFAQ</li><li>http://twiki.org/cgi-bin/view/TWiki/TextFormattingRules</li><li>http://twiki.org/cgi-bin/view/TWiki/UnlockTopic</li><li>http://twiki.org/cgi-bin/view/TWiki/WabiSabi</li><li>http://twiki.org/cgi-bin/view/TWiki/WebChanges</li><li>http://twiki.org/cgi-bin/view/TWiki/WebChangesAlert</li><li>http://twiki.org/cgi-bin/view/TWiki/WebHome</li><li>http://twiki.org/cgi-bin/view/TWiki/WebIndex</li><li>http://twiki.org/cgi-bin/view/TWiki/WebNotify</li><li>http://twiki.org/cgi-bin/view/TWiki/WebPreferences</li><li>http://twiki.org/cgi-bin/view/TWiki/WebSearch</li><li>http://twiki.org/cgi-bin/view/TWiki/WebSiteTools</li><li>http://twiki.org/cgi-bin/view/TWiki/WebStatistics</li><li>http://twiki.org/cgi-bin/view/TWiki/WebTopicEditTemplate</li><li>http://twiki.org/cgi-bin/view/TWiki/WebTopicList</li><li>http://twiki.org/cgi-bin/view/TWiki/WebTopicNonWikiTemplate</li><li>http://twiki.org/cgi-bin/view/TWiki/WebTopicViewTemplate</li><li>http://twiki.org/cgi-bin/view/TWiki/WelcomeGuest</li><li>http://twiki.org/cgi-bin/view/TWiki/WhatIsWikiWiki</li><li>http://twiki.org/cgi-bin/view/TWiki/WikiCulture</li><li>http://twiki.org/cgi-bin/view/TWiki/WikiName</li><li>http://twiki.org/cgi-bin/view/TWiki/WikiNotation</li><li>http://twiki.org/cgi-bin/view/TWiki/WikiReferences</li><li>http://twiki.org/cgi-bin/view/TWiki/WikiSyntax</li><li>http://twiki.org/cgi-bin/view/TWiki/WikiTopic</li><li>http://twiki.org/cgi-bin/view/TWiki/WikiWikiClones</li><li>http://twiki.org/cgi-bin/view/TWiki/WikiWord</li><li>http://twiki.org/cgi-bin/view/TWiki/WindowsInstallCookbook</li><li>http://twiki.org/cgi-bin/view/TWiki/YouAreHere</li><li>http://twiki.org/cgi-bin/viewfile/TWiki/FileAttachment?rev=&amp;filename=Sample.txt</li><li>http://twiki.org/cgi-bin/viewfile/TWiki/FileAttachment?rev=&amp;filename=Smile.gif</li><li>http://twiki.org/cgi-bin/viewfile/TWiki/FileAttachment?rev=1.1&amp;filename=Sample.txt</li><li>http://twiki.org/cgi-bin/viewfile/TWiki/TWiki/FileAttachment?rev=&amp;filename=Sample.txt</li><li>http://twiki.org/download.html</li><li>http://twiki.org/p/pub/TWiki/FileAttachment/Sample.txt</li><li>http://twiki.org/p/pub/TWiki/FileAttachment/Smile.gif</li><li>http://twiki.org/p/pub/TWiki/TWikiDocGraphics/help.gif</li><li>http://twiki.org/p/pub/TWiki/TWikiDocGraphics/new.gif</li><li>http://twiki.org/p/pub/TWiki/TWikiDocGraphics/tip.gif</li><li>http://twiki.org/p/pub/TWiki/TWikiDocGraphics/warning.gif</li><li>http://www.apache.org/dist/httpd/Announcement.html</li><li>http://www.apache.org/docs/mod/directives.html</li><li>http://www.apache.org/dyn/closer.cgi</li><li>http://www.cpan.org/</li><li>http://www.cygwin.com/cygwin-ug-net/using.html</li><li>http://www.gnu.org/copyleft/gpl.html</li><li>http://www.gnu.org/software/rcs/rcs.html</li><li>http://www.google.com/</li><li>http://www.info-zip.org/pub/infozip/UnZip.html</li><li>http://www.mcs.kent.edu/system/web_help/htaccess/introduction.html</li><li>http://www.microsoft.com/ntserver/partners/findoffering/serversolutions/Maintnce.asp</li><li>http://www.scintilla.org/SciTE.html</li><li>http://www.simtel.net/pub/dl/11983.shtml</li><li>http://www.winzip.com/</li><li>http://xml.org/</li><li>http://yahoo.com/</li><li>http://yourdomain.com/</li><li>http://yourdomain.com/bin/testenv</li></ul>",
	"url" : "http://foo.com:80/twiki/TWikiDocumentation.html",
	"issueType" : 5243904,
	"protocol" : "http",
	"severity" : "Information",
	"confidence" : "Certain",
	"port" : 80,
	"messageType" : "scanIssue"
},
{
	"issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	"inScope" : true,
	"host" : "foo.com",
	"requestResponses" : [
		{
			"request" : {
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/twiki/TWikiDocumentation.html?createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"messageType" : "request",
				"query" : "createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"port" : 80,
				"method" : "GET",
				"path" : "/twiki/TWikiDocumentation.html",
				"protocol" : "http",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com"
			},
			"response" : {
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"statusCode" : 200,
				"body" : "",
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Date" : "Wed, 08 Jun 2016 16:35:42 GMT",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:14 GMT",
					"ETag" : "",
					"Content-Length" : "453477",
					"Accept-Ranges" : "bytes",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html"
				},
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML"
			},
			"messageType" : "requestResponse"
		}
	],
	"remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	"issueDetail" : "The following email addresses were disclosed in the response:<ul><li>Peter@Thoeny.com</li><li>name@domain.com</li><li>secondary@home.com</li><li>you@yourdomain.com</li></ul>",
	"url" : "http://foo.com:80/twiki/TWikiDocumentation.html",
	"name" : "Email addresses disclosed",
	"protocol" : "http",
	"issueType" : 6291968,
	"port" : 80,
	"messageType" : "scanIssue",
	"confidence" : "Certain",
	"severity" : "Information"
},
{
	"messageType" : "scanIssue",
	"port" : 80,
	"confidence" : "Certain",
	"severity" : "Information",
	"protocol" : "http",
	"issueType" : 8389120,
	"url" : "http://foo.com:80/twiki/TWikiDocumentation.html",
	"name" : "HTML does not specify charset",
	"requestResponses" : [
		{
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/twiki/TWikiDocumentation.html?createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"query" : "createlink=on&hidefile=on&filename=Sample.txt&filepath=C%253a%255cDATA%255cSample.txt&filecomment=Just%2ba%2bsample&changeproperties=Change%2bproperties",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"path" : "/twiki/TWikiDocumentation.html",
				"protocol" : "http",
				"headers" : {
					"Connection" : "close",
					"Accept" : "*/*",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept-Language" : "en",
					"Host" : "foo.com"
				}
			},
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Accept-Ranges" : "bytes",
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:14 GMT",
					"Date" : "Wed, 08 Jun 2016 16:35:42 GMT",
					"ETag" : "",
					"Content-Length" : "453477"
				}
			},
			"messageType" : "requestResponse"
		}
	],
	"remediationBackground" : "<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\n</p>",
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\n<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>"
},
{
	"protocol" : "http",
	"issueType" : 5245344,
	"port" : 80,
	"messageType" : "scanIssue",
	"severity" : "Information",
	"confidence" : "Firm",
	"url" : "http://foo.com:80/twiki/TWikiHistory.html",
	"name" : "Frameable response (potential Clickjacking)",
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"requestResponses" : [
		{
			"request" : {
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/twiki/TWikiHistory.html",
				"path" : "/twiki/TWikiHistory.html",
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"Referer" : "http://foo.com/twiki/",
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Cookie" : "security=high; PHPSESSID=249765abfd585ca77e86618061301bcb"
				},
				"protocol" : "http",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : ""
			},
			"response" : {
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"cookies" : [],
				"headers" : {
					"Content-Type" : "text/html",
					"Connection" : "close",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Accept-Ranges" : "bytes",
					"ETag" : "",
					"Content-Length" : "52417",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:15 GMT",
					"Date" : "Wed, 08 Jun 2016 16:14:54 GMT"
				},
				"protocol" : "http",
				"port" : 80,
				"messageType" : "response",
				"body" : "",
				"statusCode" : 200,
				"inScope" : true,
				"host" : "foo.com",
				"raw" : ""
			},
			"messageType" : "requestResponse"
		}
	],
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>"
},
{
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\n<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>",
	"requestResponses" : [
		{
			"request" : {
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"url" : "http://foo.com:80/twiki/TWikiHistory.html",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"headers" : {
					"Accept-Language" : "en",
					"Referer" : "http://foo.com/twiki/",
					"Host" : "foo.com",
					"Connection" : "close",
					"Accept" : "*/*",
					"Cookie" : "security=high; PHPSESSID=249765abfd585ca77e86618061301bcb",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				},
				"protocol" : "http",
				"path" : "/twiki/TWikiHistory.html",
				"method" : "GET",
				"messageType" : "request",
				"port" : 80
			},
			"messageType" : "requestResponse",
			"response" : {
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Date" : "Wed, 08 Jun 2016 16:14:54 GMT",
					"Last-Modified" : "Sun, 02 Feb 2003 02:45:15 GMT",
					"Content-Length" : "52417",
					"ETag" : "",
					"Accept-Ranges" : "bytes",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html",
					"Connection" : "close"
				},
				"port" : 80,
				"messageType" : "response",
				"statusCode" : 200,
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			}
		}
	],
	"remediationBackground" : "<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\n</p>",
	"issueType" : 8389120,
	"protocol" : "http",
	"severity" : "Information",
	"confidence" : "Certain",
	"messageType" : "scanIssue",
	"port" : 80,
	"name" : "HTML does not specify charset",
	"url" : "http://foo.com:80/twiki/TWikiHistory.html"
},
{
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/twiki/bin/edit/TWiki/TWikiFAQ",
	"issueType" : 5245344,
	"protocol" : "http",
	"severity" : "Information",
	"confidence" : "Firm",
	"messageType" : "scanIssue",
	"port" : 80,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"inScope" : true,
	"host" : "foo.com",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"statusCode" : 200,
				"body" : "",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Expires" : "Thu, 09 Jun 2016 16:42:15 GMT",
					"Last-Modified" : "Wed, 08 Jun 2016 16:42:15 GMT",
					"Date" : "Wed, 08 Jun 2016 16:42:15 GMT",
					"Content-Type" : "text/html; charset=ISO-8859-1",
					"Connection" : "close",
					"Content-length" : "3091",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Cache-control" : "max-age=86400"
				},
				"messageType" : "response",
				"port" : 80
			},
			"request" : {
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"protocol" : "http",
				"path" : "/twiki/bin/edit/TWiki/TWikiFAQ",
				"method" : "GET",
				"messageType" : "request",
				"port" : 80,
				"url" : "http://foo.com:80/twiki/bin/edit/TWiki/TWikiFAQ",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"httpVersion" : "HTTP/1.1",
				"body" : ""
			}
		}
	],
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>"
},
{
	"inScope" : true,
	"issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	"host" : "foo.com",
	"remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"port" : 80,
				"messageType" : "response",
				"cookies" : [],
				"headers" : {
					"Content-Type" : "text/html; charset=ISO-8859-1",
					"Connection" : "close",
					"Date" : "Wed, 08 Jun 2016 16:38:27 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Length" : "62797"
				},
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com",
				"body" : "",
				"statusCode" : 200
			},
			"request" : {
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"raw" : "",
				"inScope" : true,
				"host" : "foo.com",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome?rev1=1.6&rev2=1.5",
				"path" : "/twiki/bin/rdiff/Main/WebHome",
				"port" : 80,
				"messageType" : "request",
				"query" : "rev1=1.6&rev2=1.5",
				"method" : "GET",
				"headers" : {
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"protocol" : "http"
			}
		}
	],
	"name" : "Frameable response (potential Clickjacking)",
	"url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome",
	"issueType" : 5245344,
	"protocol" : "http",
	"confidence" : "Firm",
	"severity" : "Information",
	"port" : 80,
	"messageType" : "scanIssue"
},
{
	"name" : "Cross-domain Referer leakage",
	"url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome",
	"issueDetail" : "The page was loaded from a URL containing a query string:<ul><li>http://foo.com/twiki/bin/rdiff/Main/WebHome?rev1=1.6&amp;rev2=1.5</li></ul>The response contains the following link to another domain:<ul><li>http://twiki.org/</li></ul>",
	"issueType" : 5243904,
	"protocol" : "http",
	"severity" : "Information",
	"confidence" : "Certain",
	"messageType" : "scanIssue",
	"port" : 80,
	"host" : "foo.com",
	"inScope" : true,
	"issueBackground" : "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
	"remediationBackground" : "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties.</p>",
	"requestResponses" : [
		{
			"response" : {
				"protocol" : "http",
				"cookies" : [],
				"headers" : {
					"Content-Length" : "62797",
					"Content-Type" : "text/html; charset=ISO-8859-1",
					"Connection" : "close",
					"Date" : "Wed, 08 Jun 2016 16:38:27 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2"
				},
				"messageType" : "response",
				"port" : 80,
				"mimeType" : "HTML",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"statusCode" : 200,
				"body" : ""
			},
			"messageType" : "requestResponse",
			"request" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"messageType" : "request",
				"method" : "GET",
				"port" : 80,
				"query" : "rev1=1.6&rev2=1.5",
				"path" : "/twiki/bin/rdiff/Main/WebHome",
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Connection" : "close",
					"Accept" : "*/*"
				},
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome?rev1=1.6&rev2=1.5"
			}
		}
	]
},
{
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	"requestResponses" : [
		{
			"request" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"path" : "/twiki/bin/rdiff/Main/WebHome",
				"messageType" : "request",
				"port" : 80,
				"query" : "rev1=1a264\"><a>05f5b&rev2=1.5",
				"method" : "GET",
				"headers" : {
					"Host" : "foo.com",
					"Accept-Language" : "en",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"protocol" : "http",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome?rev1=1a264\"><a>05f5b&rev2=1.5"
			},
			"messageType" : "requestResponse",
			"response" : {
				"port" : 80,
				"messageType" : "response",
				"protocol" : "http",
				"headers" : {
					"Content-Length" : "3167",
					"Date" : "Wed, 08 Jun 2016 16:38:37 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Connection" : "close",
					"Content-Type" : "text/html; charset=ISO-8859-1"
				},
				"cookies" : [],
				"toolFlag" : 16962,
				"referenceID" : 0,
				"mimeType" : "HTML",
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"statusCode" : 200,
				"body" : ""
			}
		}
	],
	"issueType" : 2097920,
	"protocol" : "http",
	"severity" : "High",
	"confidence" : "Firm",
	"messageType" : "scanIssue",
	"port" : 80,
	"name" : "Cross-site scripting (reflected)",
	"issueDetail" : "The value of the <b>rev1</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>1a264\"&gt;&lt;a&gt;05f5b</b> was submitted in the rev1 parameter. This input was echoed unmodified in the application's response.<br><br>This behavior demonstrates that it is possible to inject new HTML tags into the returned document. An attempt was made to identify a full proof-of-concept attack for injecting arbitrary JavaScript but this was not successful. You should manually examine the application's behavior and attempt to identify any unusual input validation or other obstacles that may be in place.",
	"url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome"
},
{
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"inScope" : true,
	"host" : "foo.com",
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"host" : "foo.com",
				"inScope" : true,
				"raw" : "",
				"statusCode" : 200,
				"body" : "",
				"messageType" : "response",
				"port" : 80,
				"protocol" : "http",
				"headers" : {
					"Date" : "Wed, 08 Jun 2016 16:38:54 GMT",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Content-Type" : "text/html; charset=ISO-8859-1",
					"Connection" : "close",
					"Content-Length" : "3104"
				},
				"cookies" : [],
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML"
			},
			"request" : {
				"url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome?rev1=5eb12<a>33282&rev2=1.5",
				"toolFlag" : 16962,
				"referenceID" : 0,
				"protocol" : "http",
				"headers" : {
					"Accept-Language" : "en",
					"Host" : "foo.com",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Accept" : "*/*",
					"Connection" : "close"
				},
				"messageType" : "request",
				"query" : "rev1=5eb12<a>33282&rev2=1.5",
				"port" : 80,
				"method" : "GET",
				"path" : "/twiki/bin/rdiff/Main/WebHome",
				"httpVersion" : "HTTP/1.1",
				"body" : "",
				"host" : "foo.com",
				"inScope" : true,
				"raw" : ""
			}
		}
	],
	"name" : "Cross-site scripting (reflected)",
	"url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome",
	"issueDetail" : "The value of the <b>rev1</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>5eb12&lt;a&gt;33282</b> was submitted in the rev1 parameter. This input was echoed unmodified in the application's response.<br><br>This behavior demonstrates that it is possible to inject new HTML tags into the returned document. An attempt was made to identify a full proof-of-concept attack for injecting arbitrary JavaScript but this was not successful. You should manually examine the application's behavior and attempt to identify any unusual input validation or other obstacles that may be in place.",
	"issueType" : 2097920,
	"protocol" : "http",
	"severity" : "High",
	"confidence" : "Firm",
	"messageType" : "scanIssue",
	"port" : 80
},
{
	"issueType" : 2097920,
	"protocol" : "http",
	"severity" : "High",
	"confidence" : "Certain",
	"messageType" : "scanIssue",
	"port" : 80,
	"name" : "Cross-site scripting (reflected)",
	"issueDetail" : "The value of the <b>rev1</b> request parameter is copied into the HTML document as text between TITLE tags. The payload <b>}}dad0a&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;bd95a</b> was submitted in the rev1 parameter. This input was echoed as <b>dad0a&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;bd95a</b> in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.",
	"url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome",
	"inScope" : true,
	"host" : "foo.com",
	"issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	"remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	"requestResponses" : [
		{
			"messageType" : "requestResponse",
			"response" : {
				"referenceID" : 0,
				"toolFlag" : 16962,
				"mimeType" : "HTML",
				"messageType" : "response",
				"port" : 80,
				"headers" : {
					"Content-Length" : "3284",
					"Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					"Date" : "Wed, 08 Jun 2016 16:39:21 GMT",
					"Connection" : "close",
					"Content-Type" : "text/html; charset=ISO-8859-1"
				},
				"cookies" : [],
				"protocol" : "http",
				"body" : "",
				"statusCode" : 200,
				"inScope" : true,
				"raw" : "",
				"host" : "foo.com"
			},
			"request" : {
				"inScope" : true,
				"host" : "foo.com",
				"raw" : "",
				"body" : "",
				"httpVersion" : "HTTP/1.1",
				"path" : "/twiki/bin/rdiff/Main/WebHome",
				"query" : "rev1=1.6}}dad0a<%2ftitle><script>alert(1)<%2fscript>bd95a&rev2=1.5",
				"messageType" : "request",
				"port" : 80,
				"method" : "GET",
				"headers" : {
					"Accept" : "*/*",
					"Connection" : "close",
					"User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					"Host" : "foo.com",
					"Accept-Language" : "en"
				},
				"protocol" : "http",
				"referenceID" : 0,
				"toolFlag" : 16962,
				"url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome?rev1=1.6}}dad0a<%2ftitle><script>alert(1)<%2fscript>bd95a&rev2=1.5"
	       }
	    }
	]
      },
      {
	      "inScope" : true,
	      "issueBackground" : "<p>Operating system command injection vulnerabilities arise when an application incorporates user-controllable data into a command that is processed by a shell command interpreter. If the user data is not strictly validated, an attacker can use shell metacharacters to modify the command that is executed, and inject arbitrary further commands that will be executed by the server.</p>\n<p>OS command injection vulnerabilities are usually very serious and may lead to compromise of the server hosting the application, or of the application's own data and functionality. It may also be possible to use the server as a platform for attacks against other systems. The exact potential for exploitation depends upon the security context in which the command is executed, and the privileges that this context has regarding sensitive resources on the server.</p>",
	      "host" : "foo.com",
	      "requestResponses" : [
		      {
			      "request" : {
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome?rev1=1.6|ping%20-n%2021%20127.0.0.1||`ping%20-c%2021%20127.0.0.1`%20%23'%20|ping%20-n%2021%20127.0.0.1||`ping%20-c%2021%20127.0.0.1`%20%23\\\"%20|ping%20-n%2021%20127.0.0.1&rev2=1.5",
				      "path" : "/twiki/bin/rdiff/Main/WebHome",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "query" : "rev1=1.6|ping%20-n%2021%20127.0.0.1||`ping%20-c%2021%20127.0.0.1`%20%23'%20|ping%20-n%2021%20127.0.0.1||`ping%20-c%2021%20127.0.0.1`%20%23\\\"%20|ping%20-n%2021%20127.0.0.1&rev2=1.5",
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "protocol" : "http",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "inScope" : true,
				      "raw" : "",
				      "host" : "foo.com"
			      },
			      "messageType" : "requestResponse"
		      }
	      ],
	      "remediationBackground" : "<p>If possible, applications should avoid incorporating user-controllable data into operating system commands. In almost every situation, there are safer alternative methods of performing server-level tasks, which cannot be manipulated to perform additional commands than the one intended.</p>\n<p>If it is considered unavoidable to incorporate user-supplied data into operating system commands, the following two layers of defense should be used to prevent attacks: </p>\n<ul>\n  <li>The user data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable shell metacharacter or whitespace, should be rejected.</li>\n  <li>The application should use command APIs that launch a specific process via its name and command-line parameters, rather than passing a command string to a shell interpreter that supports command chaining and redirection. For example, the Java API Runtime.exec and the ASP.NET API Process.Start do not support shell metacharacters. This defense can mitigate the impact of an attack even in the event that an attacker circumvents the input validation defenses.</li>\n</ul>",
	      "name" : "OS command injection",
	      "url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome",
	      "issueDetail" : "The <b>rev1</b> parameter appears to be vulnerable to OS command injection attacks. It is possible to use various shell metacharacters to inject arbitrary OS commands. The command output does not appear to be returned in the application's responses, however it is possible to inject time delay commands to verify the existence of the vulnerability.<br><br>The payload <b>|ping -n 21 127.0.0.1||`ping -c 21 127.0.0.1` #' |ping -n 21 127.0.0.1||`ping -c 21 127.0.0.1` #\\\" |ping -n 21 127.0.0.1</b> was submitted in the rev1 parameter. The application timed out when responding to the request, indicating that the injected command caused a time delay.",
	      "issueType" : 1048832,
	      "protocol" : "http",
	      "confidence" : "Firm",
	      "severity" : "High",
	      "messageType" : "scanIssue",
	      "port" : 80
      },
      {
	      "inScope" : true,
	      "host" : "foo.com",
	      "issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	      "requestResponses" : [
		      {
			      "response" : {
				      "body" : "",
				      "statusCode" : 200,
				      "inScope" : true,
				      "host" : "foo.com",
				      "raw" : "",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "HTML",
				      "messageType" : "response",
				      "port" : 80,
				      "headers" : {
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=ISO-8859-1",
					      "Date" : "Wed, 08 Jun 2016 16:43:11 GMT",
					      "Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					      "Content-Length" : "116995"
				      },
				      "cookies" : [],
				      "protocol" : "http"
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome?rev1=1.6&rev2=2c60d<%2ftitle>6be79",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "protocol" : "http",
				      "headers" : {
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "query" : "rev1=1.6&rev2=2c60d<%2ftitle>6be79",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/twiki/bin/rdiff/Main/WebHome",
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "inScope" : true,
				      "raw" : "",
				      "host" : "foo.com"
			      }
		      }
	      ],
	      "remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	      "issueType" : 2097920,
	      "protocol" : "http",
	      "confidence" : "Firm",
	      "severity" : "High",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "name" : "Cross-site scripting (reflected)",
	      "url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome",
	      "issueDetail" : "The value of the <b>rev2</b> request parameter is copied into the HTML document as text between TITLE tags. The payload <b>2c60d&lt;/title&gt;6be79</b> was submitted in the rev2 parameter. This input was echoed unmodified in the application's response.<br><br>This behavior demonstrates that it is possible to can close the open &lt;TITLE&gt; tag and return to a plain text context. An attempt was made to identify a full proof-of-concept attack for injecting arbitrary JavaScript but this was not successful. You should manually examine the application's behavior and attempt to identify any unusual input validation or other obstacles that may be in place."
      },
      {
	      "confidence" : "Firm",
	      "severity" : "High",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "issueType" : 1048832,
	      "protocol" : "http",
	      "name" : "OS command injection",
	      "url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome",
	      "issueDetail" : "The <b>rev2</b> parameter appears to be vulnerable to OS command injection attacks. It is possible to use the pipe character (|) to inject arbitrary OS commands and retrieve the output in the application's responses.<br><br>The payload <b>|echo 36b3e01298 bea4a2274a||a #' |echo 36b3e01298 bea4a2274a||a #|\" |echo 36b3e01298 bea4a2274a||a #</b> was submitted in the rev2 parameter. The application's response appears to contain the output from the injected command, indicating that the command was executed.",
	      "remediationBackground" : "<p>If possible, applications should avoid incorporating user-controllable data into operating system commands. In almost every situation, there are safer alternative methods of performing server-level tasks, which cannot be manipulated to perform additional commands than the one intended.</p>\n<p>If it is considered unavoidable to incorporate user-supplied data into operating system commands, the following two layers of defense should be used to prevent attacks: </p>\n<ul>\n  <li>The user data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable shell metacharacter or whitespace, should be rejected.</li>\n  <li>The application should use command APIs that launch a specific process via its name and command-line parameters, rather than passing a command string to a shell interpreter that supports command chaining and redirection. For example, the Java API Runtime.exec and the ASP.NET API Process.Start do not support shell metacharacters. This defense can mitigate the impact of an attack even in the event that an attacker circumvents the input validation defenses.</li>\n</ul>",
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "HTML",
				      "port" : 80,
				      "messageType" : "response",
				      "headers" : {
					      "Content-Length" : "3322",
					      "Content-Type" : "text/html; charset=ISO-8859-1",
					      "Connection" : "close",
					      "Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					      "Date" : "Wed, 08 Jun 2016 16:43:22 GMT"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "body" : "",
				      "statusCode" : 200,
				      "host" : "foo.com",
				      "inScope" : true,
				      "raw" : ""
			      },
			      "request" : {
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://foo.com:80/twiki/bin/rdiff/Main/WebHome?rev1=1.6&rev2=1.5|echo%2036b3e01298%20bea4a2274a||a%20%23'%20|echo%2036b3e01298%20bea4a2274a||a%20%23|\"%20|echo%2036b3e01298%20bea4a2274a||a%20%23",
				      "path" : "/twiki/bin/rdiff/Main/WebHome",
				      "messageType" : "request",
				      "query" : "rev1=1.6&rev2=1.5|echo%2036b3e01298%20bea4a2274a||a%20%23'%20|echo%2036b3e01298%20bea4a2274a||a%20%23|\"%20|echo%2036b3e01298%20bea4a2274a||a%20%23",
				      "method" : "GET",
				      "port" : 80,
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "protocol" : "http",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "inScope" : true,
				      "host" : "foo.com",
				      "raw" : ""
			      }
		      }
	      ],
	      "inScope" : true,
	      "issueBackground" : "<p>Operating system command injection vulnerabilities arise when an application incorporates user-controllable data into a command that is processed by a shell command interpreter. If the user data is not strictly validated, an attacker can use shell metacharacters to modify the command that is executed, and inject arbitrary further commands that will be executed by the server.</p>\n<p>OS command injection vulnerabilities are usually very serious and may lead to compromise of the server hosting the application, or of the application's own data and functionality. It may also be possible to use the server as a platform for attacks against other systems. The exact potential for exploitation depends upon the security context in which the command is executed, and the privileges that this context has regarding sensitive resources on the server.</p>",
	      "host" : "foo.com"
      },
      {
	      "issueType" : 5245344,
	      "protocol" : "http",
	      "severity" : "Information",
	      "confidence" : "Firm",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "name" : "Frameable response (potential Clickjacking)",
	      "url" : "http://foo.com:80/twiki/bin/view",
	      "inScope" : true,
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "host" : "foo.com",
	      "requestResponses" : [
		      {
			      "request" : {
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/twiki/bin/view",
				      "url" : "http://foo.com:80/twiki/bin/view",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "raw" : "",
				      "inScope" : true,
				      "host" : "foo.com",
				      "httpVersion" : "HTTP/1.1",
				      "body" : ""
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "port" : 80,
				      "messageType" : "response",
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "38326",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=ISO-8859-1",
					      "Date" : "Wed, 08 Jun 2016 16:22:10 GMT",
					      "Server" : "Apache/2.2.8 (Ubuntu) DAV/2"
				      },
				      "protocol" : "http",
				      "body" : "",
				      "statusCode" : 200,
				      "inScope" : true,
				      "host" : "foo.com",
				      "raw" : ""
			      }
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>"
      },
      {
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "host" : "foo.com",
				      "inScope" : true,
				      "raw" : "",
				      "body" : "",
				      "statusCode" : 200,
				      "port" : 80,
				      "messageType" : "response",
				      "cookies" : [],
				      "headers" : {
					      "Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					      "Date" : "Wed, 08 Jun 2016 16:23:24 GMT",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=ISO-8859-1",
					      "Content-Length" : "10372"
				      },
				      "protocol" : "http",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML"
			      },
			      "request" : {
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "raw" : "",
				      "inScope" : true,
				      "host" : "foo.com",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://foo.com:80/twiki/bin/view/Know",
				      "path" : "/twiki/bin/view/Know",
				      "messageType" : "request",
				      "method" : "GET",
				      "port" : 80,
				      "headers" : {
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http"
			      }
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "inScope" : true,
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "host" : "foo.com",
	      "confidence" : "Firm",
	      "severity" : "Information",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueType" : 5245344,
	      "protocol" : "http",
	      "name" : "Frameable response (potential Clickjacking)",
	      "url" : "http://foo.com:80/twiki/bin/view/Know"
      },
      {
	      "severity" : "Information",
	      "confidence" : "Firm",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueType" : 5245344,
	      "protocol" : "http",
	      "name" : "Frameable response (potential Clickjacking)",
	      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome",
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "port" : 80,
				      "messageType" : "response",
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					      "Date" : "Wed, 08 Jun 2016 16:29:01 GMT",
					      "Content-Type" : "text/html; charset=ISO-8859-1",
					      "Connection" : "close",
					      "Content-Length" : "31193"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "host" : "foo.com",
				      "inScope" : true,
				      "raw" : "",
				      "statusCode" : 200,
				      "body" : ""
			      },
			      "request" : {
				      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome?rev=1.6",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "protocol" : "http",
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "messageType" : "request",
				      "query" : "rev=1.6",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/twiki/bin/view/Main/WebHome",
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "raw" : "",
				      "inScope" : true,
				      "host" : "foo.com"
			      }
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "host" : "foo.com",
	      "inScope" : true,
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>"
      },
      {
	      "issueBackground" : "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
	      "inScope" : true,
	      "host" : "foo.com",
	      "requestResponses" : [
		      {
			      "response" : {
				      "messageType" : "response",
				      "port" : 80,
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "31193",
					      "Date" : "Wed, 08 Jun 2016 16:29:01 GMT",
					      "Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=ISO-8859-1"
				      },
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "HTML",
				      "raw" : "",
				      "inScope" : true,
				      "host" : "foo.com",
				      "statusCode" : 200,
				      "body" : ""
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "query" : "rev=1.6",
				      "path" : "/twiki/bin/view/Main/WebHome",
				      "protocol" : "http",
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "Host" : "foo.com",
					      "Accept-Language" : "en"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome?rev=1.6",
				      "inScope" : true,
				      "host" : "foo.com",
				      "raw" : "",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1"
			      }
		      }
	      ],
	      "remediationBackground" : "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties.</p>",
	      "protocol" : "http",
	      "issueType" : 5243904,
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "issueDetail" : "The page was loaded from a URL containing a query string:<ul><li>http://foo.com/twiki/bin/view/Main/WebHome?rev=1.6</li></ul>The response contains the following link to another domain:<ul><li>http://twiki.org/</li></ul>",
	      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome",
	      "name" : "Cross-domain Referer leakage"
      },
      {
	      "name" : "Cross-site scripting (reflected)",
	      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome",
	      "issueDetail" : "The value of the <b>rev</b> request parameter is copied into the value of an HTML tag attribute which is encapsulated in double quotation marks. The payload <b>4fedf\"a=\"b\"6de4b</b> was submitted in the rev parameter. This input was echoed unmodified in the application's response.<br><br>This behavior demonstrates that it is possible to inject new attributes into an existing HTML tag. An attempt was made to identify a full proof-of-concept attack for injecting arbitrary JavaScript but this was not successful. You should manually examine the application's behavior and attempt to identify any unusual input validation or other obstacles that may be in place.",
	      "issueType" : 2097920,
	      "protocol" : "http",
	      "severity" : "High",
	      "confidence" : "Firm",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "inScope" : true,
	      "host" : "foo.com",
	      "issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	      "remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "messageType" : "response",
				      "port" : 80,
				      "headers" : {
					      "Content-Length" : "2889",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=ISO-8859-1",
					      "Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					      "Date" : "Wed, 08 Jun 2016 16:30:01 GMT"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "body" : "",
				      "statusCode" : 200,
				      "host" : "foo.com",
				      "inScope" : true,
				      "raw" : ""
			      },
			      "request" : {
				      "host" : "foo.com",
				      "inScope" : true,
				      "raw" : "",
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*"
				      },
				      "query" : "rev=4fedf\"a%3d\"b\"6de4b",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/twiki/bin/view/Main/WebHome",
				      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome?rev=4fedf\"a%3d\"b\"6de4b",
				      "referenceID" : 0,
				      "toolFlag" : 16962
			      }
		      }
	      ]
      },
      {
	      "issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	      "inScope" : true,
	      "host" : "foo.com",
	      "requestResponses" : [
		      {
			      "request" : {
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "inScope" : true,
				      "raw" : "",
				      "host" : "foo.com",
				      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome?rev=5b3d8<a>fa5c5",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "protocol" : "http",
				      "path" : "/twiki/bin/view/Main/WebHome",
				      "method" : "GET",
				      "messageType" : "request",
				      "query" : "rev=5b3d8<a>fa5c5",
				      "port" : 80
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "mimeType" : "HTML",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "cookies" : [],
				      "headers" : {
					      "Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					      "Date" : "Wed, 08 Jun 2016 16:30:12 GMT",
					      "Content-Type" : "text/html; charset=ISO-8859-1",
					      "Connection" : "close",
					      "Content-Length" : "2829"
				      },
				      "protocol" : "http",
				      "port" : 80,
				      "messageType" : "response",
				      "body" : "",
				      "statusCode" : 200,
				      "host" : "foo.com",
				      "inScope" : true,
				      "raw" : ""
			      }
		      }
	      ],
	      "remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	      "name" : "Cross-site scripting (reflected)",
	      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome",
	      "issueDetail" : "The value of the <b>rev</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>5b3d8&lt;a&gt;fa5c5</b> was submitted in the rev parameter. This input was echoed unmodified in the application's response.<br><br>This behavior demonstrates that it is possible to inject new HTML tags into the returned document. An attempt was made to identify a full proof-of-concept attack for injecting arbitrary JavaScript but this was not successful. You should manually examine the application's behavior and attempt to identify any unusual input validation or other obstacles that may be in place.",
	      "issueType" : 2097920,
	      "protocol" : "http",
	      "severity" : "High",
	      "confidence" : "Firm",
	      "messageType" : "scanIssue",
	      "port" : 80
      },
      {
	      "host" : "foo.com",
	      "inScope" : true,
	      "issueBackground" : "<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>",
	      "remediationBackground" : "<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; \" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "messageType" : "request",
				      "query" : "rev=2f30c<%2ftitle><a>0487a",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/twiki/bin/view/Main/WebHome",
				      "protocol" : "http",
				      "headers" : {
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome?rev=2f30c<%2ftitle><a>0487a",
				      "inScope" : true,
				      "raw" : "",
				      "host" : "foo.com",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1"
			      },
			      "response" : {
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "messageType" : "response",
				      "port" : 80,
				      "protocol" : "http",
				      "headers" : {
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=ISO-8859-1",
					      "Date" : "Wed, 08 Jun 2016 16:30:20 GMT",
					      "Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					      "Content-Length" : "2920"
				      },
				      "cookies" : [],
				      "statusCode" : 200,
				      "body" : "",
				      "raw" : "",
				      "inScope" : true,
				      "host" : "foo.com"
			      },
			      "messageType" : "requestResponse"
		      }
	      ],
	      "protocol" : "http",
	      "issueType" : 2097920,
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "severity" : "High",
	      "confidence" : "Firm",
	      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome",
	      "issueDetail" : "The value of the <b>rev</b> request parameter is copied into the HTML document as text between TITLE tags. The payload <b>2f30c&lt;/title&gt;&lt;a&gt;0487a</b> was submitted in the rev parameter. This input was echoed unmodified in the application's response.<br><br>This behavior demonstrates that it is possible to inject new HTML tags into the returned document. An attempt was made to identify a full proof-of-concept attack for injecting arbitrary JavaScript but this was not successful. You should manually examine the application's behavior and attempt to identify any unusual input validation or other obstacles that may be in place.",
	      "name" : "Cross-site scripting (reflected)"
      },
      {
	      "remediationBackground" : "<p>If possible, applications should avoid incorporating user-controllable data into operating system commands. In almost every situation, there are safer alternative methods of performing server-level tasks, which cannot be manipulated to perform additional commands than the one intended.</p>\n<p>If it is considered unavoidable to incorporate user-supplied data into operating system commands, the following two layers of defense should be used to prevent attacks: </p>\n<ul>\n  <li>The user data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable shell metacharacter or whitespace, should be rejected.</li>\n  <li>The application should use command APIs that launch a specific process via its name and command-line parameters, rather than passing a command string to a shell interpreter that supports command chaining and redirection. For example, the Java API Runtime.exec and the ASP.NET API Process.Start do not support shell metacharacters. This defense can mitigate the impact of an attack even in the event that an attacker circumvents the input validation defenses.</li>\n</ul>",
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "headers" : {
					      "Content-Length" : "3279",
					      "Content-Type" : "text/html; charset=ISO-8859-1",
					      "Connection" : "close",
					      "Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					      "Date" : "Wed, 08 Jun 2016 16:30:28 GMT"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "port" : 80,
				      "messageType" : "response",
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "host" : "foo.com",
				      "inScope" : true,
				      "raw" : "",
				      "body" : "",
				      "statusCode" : 200
			      },
			      "request" : {
				      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome?rev=1.6|echo%20695dfb0318%200a8abfb8f8||a%20%23'%20|echo%20695dfb0318%200a8abfb8f8||a%20%23|\"%20|echo%20695dfb0318%200a8abfb8f8||a%20%23",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "protocol" : "http",
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "messageType" : "request",
				      "port" : 80,
				      "query" : "rev=1.6|echo%20695dfb0318%200a8abfb8f8||a%20%23'%20|echo%20695dfb0318%200a8abfb8f8||a%20%23|\"%20|echo%20695dfb0318%200a8abfb8f8||a%20%23",
				      "method" : "GET",
				      "path" : "/twiki/bin/view/Main/WebHome",
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "raw" : "",
				      "inScope" : true,
				      "host" : "foo.com"
			      }
		      }
	      ],
	      "inScope" : true,
	      "host" : "foo.com",
	      "issueBackground" : "<p>Operating system command injection vulnerabilities arise when an application incorporates user-controllable data into a command that is processed by a shell command interpreter. If the user data is not strictly validated, an attacker can use shell metacharacters to modify the command that is executed, and inject arbitrary further commands that will be executed by the server.</p>\n<p>OS command injection vulnerabilities are usually very serious and may lead to compromise of the server hosting the application, or of the application's own data and functionality. It may also be possible to use the server as a platform for attacks against other systems. The exact potential for exploitation depends upon the security context in which the command is executed, and the privileges that this context has regarding sensitive resources on the server.</p>",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "confidence" : "Firm",
	      "severity" : "High",
	      "protocol" : "http",
	      "issueType" : 1048832,
	      "url" : "http://foo.com:80/twiki/bin/view/Main/WebHome",
	      "issueDetail" : "The <b>rev</b> parameter appears to be vulnerable to OS command injection attacks. It is possible to use the pipe character (|) to inject arbitrary OS commands and retrieve the output in the application's responses.<br><br>The payload <b>|echo 695dfb0318 0a8abfb8f8||a #' |echo 695dfb0318 0a8abfb8f8||a #|\" |echo 695dfb0318 0a8abfb8f8||a #</b> was submitted in the rev parameter. The application's response appears to contain the output from the injected command, indicating that the command was executed.",
	      "name" : "OS command injection"
      },
      {
	      "requestResponses" : [
		      {
			      "response" : {
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "HTML",
				      "port" : 80,
				      "messageType" : "response",
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Date" : "Wed, 08 Jun 2016 16:16:17 GMT",
					      "Server" : "Apache/2.2.8 (Ubuntu) DAV/2",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=ISO-8859-1",
					      "Content-Length" : "11014"
				      },
				      "statusCode" : 200,
				      "body" : "",
				      "inScope" : true,
				      "raw" : "",
				      "host" : "foo.com"
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "headers" : {
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http",
				      "path" : "/twiki/bin/view/Main/WebPreferences",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "url" : "http://foo.com:80/twiki/bin/view/Main/WebPreferences",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "inScope" : true,
				      "raw" : "",
				      "host" : "foo.com",
				      "httpVersion" : "HTTP/1.1",
				      "body" : ""
			      }
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "inScope" : true,
	      "host" : "foo.com",
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "confidence" : "Firm",
	      "severity" : "Information",
	      "protocol" : "http",
	      "issueType" : 5245344,
	      "url" : "http://foo.com:80/twiki/bin/view/Main/WebPreferences",
	      "name" : "Frameable response (potential Clickjacking)"
      },
      {
	      "severity" : "Information",
	      "confidence" : "Firm",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueType" : 5245344,
	      "protocol" : "http",
	      "name" : "Frameable response (potential Clickjacking)",
	      "url" : "http://example.com:80/cgi-bin/oops.pl",
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "requestResponses" : [
		      {
			      "response" : {
				      "mimeType" : "HTML",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "protocol" : "http",
				      "headers" : {
					      "Date" : "Wed, 08 Jun 2016 16:43:42 GMT",
					      "Last-Modified" : "Fri, 09 Aug 2013 23:54:35 GMT",
					      "Expires" : "Wed, 15 Jun 2016 16:43:42 GMT",
					      "x-ec-custom-error" : "1",
					      "Content-Length" : "1270",
					      "Etag" : "\"359670651+gzip+ident\"",
					      "Vary" : "Accept-Encoding",
					      "Server" : "ECS (iad/19C1)",
					      "Connection" : "close",
					      "Content-Type" : "text/html",
					      "Cache-Control" : "max-age=604800",
					      "X-Cache" : "HIT"
				      },
				      "cookies" : [],
				      "port" : 80,
				      "messageType" : "response",
				      "statusCode" : 404,
				      "body" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : ""
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "path" : "/cgi-bin/oops.pl",
				      "method" : "GET",
				      "messageType" : "request",
				      "port" : 80,
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "protocol" : "http",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://example.com:80/cgi-bin/oops.pl",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1"
			      }
		      }
	      ],
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>"
      },
      {
	      "url" : "http://example.com:80/cgi-bin/view.pl/Main",
	      "name" : "Frameable response (potential Clickjacking)",
	      "protocol" : "http",
	      "issueType" : 5245344,
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "confidence" : "Firm",
	      "severity" : "Information",
	      "inScope" : false,
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "host" : "foo.com",
	      "requestResponses" : [
		      {
			      "request" : {
				      "messageType" : "request",
				      "method" : "GET",
				      "port" : 80,
				      "path" : "/cgi-bin/view.pl/Main",
				      "protocol" : "http",
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "Host" : "foo.com",
					      "Accept-Language" : "en"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://example.com:80/cgi-bin/view.pl/Main",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1"
			      },
			      "response" : {
				      "mimeType" : "HTML",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Etag" : "\"359670651+gzip+ident\"",
					      "Vary" : "Accept-Encoding",
					      "x-ec-custom-error" : "1",
					      "Content-Length" : "1270",
					      "Expires" : "Wed, 15 Jun 2016 16:31:57 GMT",
					      "Date" : "Wed, 08 Jun 2016 16:31:57 GMT",
					      "Last-Modified" : "Fri, 09 Aug 2013 23:54:35 GMT",
					      "Cache-Control" : "max-age=604800",
					      "X-Cache" : "HIT",
					      "Content-Type" : "text/html",
					      "Connection" : "close",
					      "Server" : "ECS (iad/19C1)"
				      },
				      "port" : 80,
				      "messageType" : "response",
				      "statusCode" : 404,
				      "body" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : ""
			      },
			      "messageType" : "requestResponse"
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>"
      },
      {
	      "name" : "HTTP TRACE method is enabled",
	      "url" : "http://httpd.apache.org:80/",
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueType" : 5245440,
	      "protocol" : "http",
	      "remediationBackground" : "<p>The TRACE method should be disabled on production web servers.</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "TRACE",
				      "path" : "/",
				      "protocol" : "http",
				      "headers" : {
					      "Connection" : "close",
					      "Cookie" : "6267aef02b",
					      "Host" : "foo.com"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://httpd.apache.org:80/"
			      },
			      "response" : {
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "",
				      "port" : 80,
				      "messageType" : "response",
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Connection" : "close",
					      "Content-Type" : "message/http",
					      "Date" : "Wed, 08 Jun 2016 16:29:22 GMT",
					      "Server" : "Apache/2.4.7 (Ubuntu)",
					      "Content-Length" : "83"
				      },
				      "statusCode" : 200,
				      "body" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : ""
			      },
			      "messageType" : "requestResponse"
		      }
	      ],
	      "issueBackground" : "<p>The HTTP TRACE  method is designed for diagnostic purposes. If enabled, the web server will respond to requests that use the TRACE method by echoing in its response the exact request that was received.</p>\n<p>This behavior is often harmless, but occasionally leads to the disclosure of sensitive information such as internal authentication headers appended by reverse proxies. This functionality could historically be used to bypass the HttpOnly cookie flag on cookies, but this is no longer possible in modern web browsers. </p>",
	      "inScope" : false,
	      "host" : "foo.com"
      },
      {
	      "requestResponses" : [
		      {
			      "request" : {
				      "url" : "http://httpd.apache.org:80/robots.txt",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "headers" : {
					      "Host" : "foo.com",
					      "Connection" : "close"
				      },
				      "protocol" : "http",
				      "path" : "/robots.txt",
				      "method" : "GET",
				      "messageType" : "request",
				      "port" : 80,
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : ""
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "port" : 80,
				      "messageType" : "response",
				      "protocol" : "http",
				      "headers" : {
					      "Accept-Ranges" : "bytes",
					      "Server" : "Apache/2.4.7 (Ubuntu)",
					      "Connection" : "close",
					      "Content-Type" : "text/plain",
					      "Date" : "Wed, 08 Jun 2016 16:29:23 GMT",
					      "Last-Modified" : "Sun, 06 May 2012 14:18:02 GMT",
					      "Content-Length" : "33",
					      "ETag" : ""
				      },
				      "cookies" : [],
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "text",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "statusCode" : 200,
				      "body" : ""
			      }
		      }
	      ],
	      "remediationBackground" : "<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>",
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>\n<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>",
	      "name" : "Robots.txt file",
	      "url" : "http://httpd.apache.org:80/robots.txt",
	      "issueDetail" : "The web server contains a robots.txt file.",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "issueType" : 6292992,
	      "protocol" : "http"
      },
      {
	      "requestResponses" : [
		      {
			      "response" : {
				      "port" : 80,
				      "messageType" : "response",
				      "protocol" : "http",
				      "headers" : {
					      "Content-Length" : "76",
					      "Date" : "Wed, 08 Jun 2016 16:14:38 GMT",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Connection" : "close",
					      "Content-Type" : "message/http"
				      },
				      "cookies" : [],
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "statusCode" : 200,
				      "body" : ""
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "headers" : {
					      "Connection" : "close",
					      "Cookie" : "1f675e6472",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http",
				      "path" : "/",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "TRACE",
				      "url" : "http://twiki.org:80/",
				      "referenceID" : 0,
				      "toolFlag" : 16962
			      }
		      }
	      ],
	      "remediationBackground" : "<p>The TRACE method should be disabled on production web servers.</p>",
	      "inScope" : false,
	      "issueBackground" : "<p>The HTTP TRACE  method is designed for diagnostic purposes. If enabled, the web server will respond to requests that use the TRACE method by echoing in its response the exact request that was received.</p>\n<p>This behavior is often harmless, but occasionally leads to the disclosure of sensitive information such as internal authentication headers appended by reverse proxies. This functionality could historically be used to bypass the HttpOnly cookie flag on cookies, but this is no longer possible in modern web browsers. </p>",
	      "host" : "foo.com",
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueType" : 5245440,
	      "protocol" : "http",
	      "name" : "HTTP TRACE method is enabled",
	      "url" : "http://twiki.org:80/"
      },
      {
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "inScope" : false,
	      "host" : "foo.com",
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "messageType" : "response",
				      "port" : 80,
				      "protocol" : "http",
				      "headers" : {
					      "Content-Length" : "46037",
					      "Date" : "Wed, 08 Jun 2016 16:38:16 GMT",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Connection" : "close"
				      },
				      "cookies" : [],
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "statusCode" : 200,
				      "body" : ""
			      },
			      "request" : {
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http",
				      "path" : "/cgi-bin/view/Codev/CreateLinkToAttachedFileBug",
				      "messageType" : "request",
				      "method" : "GET",
				      "port" : 80,
				      "url" : "http://twiki.org:80/cgi-bin/view/Codev/CreateLinkToAttachedFileBug",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "httpVersion" : "HTTP/1.1",
				      "body" : ""
			      }
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "issueType" : 5245344,
	      "protocol" : "http",
	      "severity" : "Information",
	      "confidence" : "Firm",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "name" : "Frameable response (potential Clickjacking)",
	      "url" : "http://twiki.org:80/cgi-bin/view/Codev/CreateLinkToAttachedFileBug"
      },
      {
	      "name" : "Email addresses disclosed",
	      "issueDetail" : "The following email address was disclosed in the response:<ul><li>peter09@thoeny.org</li></ul>",
	      "url" : "http://twiki.org:80/cgi-bin/view/Codev/CreateLinkToAttachedFileBug",
	      "issueType" : 6291968,
	      "protocol" : "http",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	      "inScope" : false,
	      "host" : "foo.com",
	      "remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	      "requestResponses" : [
		      {
			      "response" : {
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "body" : "",
				      "statusCode" : 200,
				      "port" : 80,
				      "messageType" : "response",
				      "headers" : {
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:38:16 GMT",
					      "Content-Length" : "46037"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML"
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://twiki.org:80/cgi-bin/view/Codev/CreateLinkToAttachedFileBug",
				      "port" : 80,
				      "messageType" : "request",
				      "method" : "GET",
				      "path" : "/cgi-bin/view/Codev/CreateLinkToAttachedFileBug",
				      "protocol" : "http",
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      }
			      }
		      }
	      ]
      },
      {
	      "name" : "Frameable response (potential Clickjacking)",
	      "url" : "http://twiki.org:80/cgi-bin/view/Codev/TWikiOnMacOSX",
	      "confidence" : "Firm",
	      "severity" : "Information",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueType" : 5245344,
	      "protocol" : "http",
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "requestResponses" : [
		      {
			      "response" : {
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:29:43 GMT",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Connection" : "close",
					      "Content-Length" : "58462"
				      },
				      "messageType" : "response",
				      "port" : 80,
				      "mimeType" : "HTML",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "statusCode" : 200,
				      "body" : ""
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "url" : "http://twiki.org:80/cgi-bin/view/Codev/TWikiOnMacOSX",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "protocol" : "http",
				      "path" : "/cgi-bin/view/Codev/TWikiOnMacOSX",
				      "port" : 80,
				      "messageType" : "request",
				      "method" : "GET"
			      }
		      }
	      ],
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>"
      },
      {
	      "protocol" : "http",
	      "issueType" : 6291968,
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "url" : "http://twiki.org:80/cgi-bin/view/Codev/TWikiOnMacOSX",
	      "issueDetail" : "The following email address was disclosed in the response:<ul><li>peter09@thoeny.org</li></ul>",
	      "name" : "Email addresses disclosed",
	      "inScope" : false,
	      "issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	      "host" : "foo.com",
	      "remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "url" : "http://twiki.org:80/cgi-bin/view/Codev/TWikiOnMacOSX",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "protocol" : "http",
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/cgi-bin/view/Codev/TWikiOnMacOSX",
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : ""
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "58462",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Connection" : "close",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:29:43 GMT"
				      },
				      "protocol" : "http",
				      "messageType" : "response",
				      "port" : 80,
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "body" : "",
				      "statusCode" : 200
			      }
		      }
	      ]
      },
      {
	      "requestResponses" : [
		      {
			      "response" : {
				      "mimeType" : "HTML",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "headers" : {
					      "Content-Length" : "46456",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:40:03 GMT",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Connection" : "close"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "port" : 80,
				      "messageType" : "response",
				      "body" : "",
				      "statusCode" : 200,
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : ""
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*"
				      },
				      "protocol" : "http",
				      "path" : "/cgi-bin/view/Know/IncorrectDllVersionW32PTH10DLL",
				      "messageType" : "request",
				      "method" : "GET",
				      "port" : 80,
				      "url" : "http://twiki.org:80/cgi-bin/view/Know/IncorrectDllVersionW32PTH10DLL",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "httpVersion" : "HTTP/1.1",
				      "body" : ""
			      }
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "name" : "Frameable response (potential Clickjacking)",
	      "url" : "http://twiki.org:80/cgi-bin/view/Know/IncorrectDllVersionW32PTH10DLL",
	      "severity" : "Information",
	      "confidence" : "Firm",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "issueType" : 5245344,
	      "protocol" : "http"
      },
      {
	      "issueDetail" : "The following email address was disclosed in the response:<ul><li>peter09@thoeny.org</li></ul>",
	      "url" : "http://twiki.org:80/cgi-bin/view/Know/IncorrectDllVersionW32PTH10DLL",
	      "name" : "Email addresses disclosed",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "protocol" : "http",
	      "issueType" : 6291968,
	      "requestResponses" : [
		      {
			      "request" : {
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "method" : "GET",
				      "messageType" : "request",
				      "port" : 80,
				      "path" : "/cgi-bin/view/Know/IncorrectDllVersionW32PTH10DLL",
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://twiki.org:80/cgi-bin/view/Know/IncorrectDllVersionW32PTH10DLL"
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "body" : "",
				      "statusCode" : 200,
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "46456",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:40:03 GMT",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Connection" : "close"
				      },
				      "protocol" : "http",
				      "port" : 80,
				      "messageType" : "response",
				      "mimeType" : "HTML",
				      "referenceID" : 0,
				      "toolFlag" : 16962
			      }
		      }
	      ],
	      "remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>"
      },
      {
	      "inScope" : false,
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "host" : "foo.com",
	      "requestResponses" : [
		      {
			      "request" : {
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://twiki.org:80/cgi-bin/view/Main/TWikiAdminGroup",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/cgi-bin/view/Main/TWikiAdminGroup",
				      "protocol" : "http",
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      }
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "headers" : {
					      "Content-Length" : "39742",
					      "Date" : "Wed, 08 Jun 2016 16:42:41 GMT",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Connection" : "close"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "port" : 80,
				      "messageType" : "response",
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "body" : "",
				      "statusCode" : 200
			      }
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "url" : "http://twiki.org:80/cgi-bin/view/Main/TWikiAdminGroup",
	      "name" : "Frameable response (potential Clickjacking)",
	      "protocol" : "http",
	      "issueType" : 5245344,
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "severity" : "Information",
	      "confidence" : "Firm"
      },
      {
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "statusCode" : 200,
				      "body" : "",
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Date" : "Wed, 08 Jun 2016 16:42:41 GMT",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Content-Length" : "39742"
				      },
				      "messageType" : "response",
				      "port" : 80,
				      "mimeType" : "HTML",
				      "referenceID" : 0,
				      "toolFlag" : 16962
			      },
			      "request" : {
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://twiki.org:80/cgi-bin/view/Main/TWikiAdminGroup",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/cgi-bin/view/Main/TWikiAdminGroup",
				      "protocol" : "http",
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      }
			      }
		      }
	      ],
	      "remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	      "name" : "Email addresses disclosed",
	      "url" : "http://twiki.org:80/cgi-bin/view/Main/TWikiAdminGroup",
	      "issueDetail" : "The following email address was disclosed in the response:<ul><li>peter09@thoeny.org</li></ul>",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueType" : 6291968,
	      "protocol" : "http"
      },
      {
	      "url" : "http://twiki.org:80/cgi-bin/view/Main/WebNotify",
	      "name" : "Frameable response (potential Clickjacking)",
	      "protocol" : "http",
	      "issueType" : 5245344,
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "severity" : "Information",
	      "confidence" : "Firm",
	      "inScope" : false,
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "host" : "foo.com",
	      "requestResponses" : [
		      {
			      "request" : {
				      "url" : "http://twiki.org:80/cgi-bin/view/Main/WebNotify",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "headers" : {
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http",
				      "path" : "/cgi-bin/view/Main/WebNotify",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com"
			      },
			      "response" : {
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "headers" : {
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:41:24 GMT",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Connection" : "close",
					      "Content-Length" : "49742"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "port" : 80,
				      "messageType" : "response",
				      "body" : "",
				      "statusCode" : 200,
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com"
			      },
			      "messageType" : "requestResponse"
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>"
      },
      {
	      "protocol" : "http",
	      "issueType" : 6291968,
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "url" : "http://twiki.org:80/cgi-bin/view/Main/WebNotify",
	      "issueDetail" : "The following email address was disclosed in the response:<ul><li>peter09@thoeny.org</li></ul>",
	      "name" : "Email addresses disclosed",
	      "inScope" : false,
	      "issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	      "host" : "foo.com",
	      "requestResponses" : [
		      {
			      "response" : {
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "port" : 80,
				      "messageType" : "response",
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "49742",
					      "Date" : "Wed, 08 Jun 2016 16:41:24 GMT",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8"
				      },
				      "protocol" : "http",
				      "body" : "",
				      "statusCode" : 200,
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : ""
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "protocol" : "http",
				      "path" : "/cgi-bin/view/Main/WebNotify",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "url" : "http://twiki.org:80/cgi-bin/view/Main/WebNotify",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "httpVersion" : "HTTP/1.1",
				      "body" : ""
			      }
		      }
	      ],
	      "remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>"
      },
      {
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/ExampleTopicTemplate",
	      "name" : "Frameable response (potential Clickjacking)",
	      "protocol" : "http",
	      "issueType" : 5245344,
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "confidence" : "Firm",
	      "severity" : "Information",
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/cgi-bin/view/TWiki/ExampleTopicTemplate",
				      "protocol" : "http",
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "Host" : "foo.com",
					      "Accept-Language" : "en"
				      },
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/ExampleTopicTemplate",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1"
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "45164",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Connection" : "close",
					      "Date" : "Wed, 08 Jun 2016 16:37:20 GMT",
					      "Server" : "Apache/2.2.3 (CentOS)"
				      },
				      "protocol" : "http",
				      "port" : 80,
				      "messageType" : "response",
				      "body" : "",
				      "statusCode" : 200,
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : ""
			      }
		      }
	      ]
      },
      {
	      "requestResponses" : [
		      {
			      "request" : {
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "protocol" : "http",
				      "headers" : {
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Host" : "foo.com",
					      "Accept-Language" : "en"
				      },
				      "method" : "GET",
				      "messageType" : "request",
				      "port" : 80,
				      "path" : "/cgi-bin/view/TWiki/ExampleTopicTemplate",
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/ExampleTopicTemplate",
				      "referenceID" : 0,
				      "toolFlag" : 16962
			      },
			      "response" : {
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "statusCode" : 200,
				      "body" : "",
				      "port" : 80,
				      "messageType" : "response",
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Date" : "Wed, 08 Jun 2016 16:37:20 GMT",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Content-Length" : "45164"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML"
			      },
			      "messageType" : "requestResponse"
		      }
	      ],
	      "remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	      "inScope" : false,
	      "issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	      "host" : "foo.com",
	      "issueDetail" : "The following email address was disclosed in the response:<ul><li>peter09@thoeny.org</li></ul>",
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/ExampleTopicTemplate",
	      "name" : "Email addresses disclosed",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "protocol" : "http",
	      "issueType" : 6291968
      },
      {
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "HTML",
				      "port" : 80,
				      "messageType" : "response",
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "47429",
					      "Date" : "Wed, 08 Jun 2016 16:30:47 GMT",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8"
				      },
				      "protocol" : "http",
				      "body" : "",
				      "statusCode" : 200,
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com"
			      },
			      "request" : {
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/SimultaneousEdits",
				      "path" : "/cgi-bin/view/TWiki/SimultaneousEdits",
				      "port" : 80,
				      "messageType" : "request",
				      "method" : "GET",
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com"
			      }
		      }
	      ],
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/SimultaneousEdits",
	      "name" : "Frameable response (potential Clickjacking)",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "severity" : "Information",
	      "confidence" : "Firm",
	      "protocol" : "http",
	      "issueType" : 5245344
      },
      {
	      "requestResponses" : [
		      {
			      "request" : {
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "path" : "/cgi-bin/view/TWiki/SimultaneousEdits",
				      "method" : "GET",
				      "messageType" : "request",
				      "port" : 80,
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept" : "*/*",
					      "Connection" : "close"
				      },
				      "protocol" : "http",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/SimultaneousEdits"
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "statusCode" : 200,
				      "body" : "",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "messageType" : "response",
				      "port" : 80,
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:30:47 GMT",
					      "Content-Length" : "47429"
				      }
			      }
		      }
	      ],
	      "remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	      "inScope" : false,
	      "issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	      "host" : "foo.com",
	      "name" : "Email addresses disclosed",
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/SimultaneousEdits",
	      "issueDetail" : "The following email address was disclosed in the response:<ul><li>peter09@thoeny.org</li></ul>",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueType" : 6291968,
	      "protocol" : "http"
      },
      {
	      "confidence" : "Firm",
	      "severity" : "Information",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "issueType" : 5245344,
	      "protocol" : "http",
	      "name" : "Frameable response (potential Clickjacking)",
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/StandardColors",
	      "requestResponses" : [
		      {
			      "request" : {
				      "protocol" : "http",
				      "headers" : {
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "method" : "GET",
				      "messageType" : "request",
				      "port" : 80,
				      "path" : "/cgi-bin/view/TWiki/StandardColors",
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/StandardColors",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "httpVersion" : "HTTP/1.1",
				      "body" : ""
			      },
			      "response" : {
				      "protocol" : "http",
				      "headers" : {
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Date" : "Wed, 08 Jun 2016 16:34:42 GMT",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Content-Length" : "64017"
				      },
				      "cookies" : [],
				      "port" : 80,
				      "messageType" : "response",
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "statusCode" : 200,
				      "body" : ""
			      },
			      "messageType" : "requestResponse"
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "inScope" : false,
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "host" : "foo.com"
      },
      {
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "64017",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Connection" : "close",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:34:42 GMT"
				      },
				      "messageType" : "response",
				      "port" : 80,
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "statusCode" : 200,
				      "body" : ""
			      },
			      "request" : {
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/StandardColors",
				      "path" : "/cgi-bin/view/TWiki/StandardColors",
				      "messageType" : "request",
				      "method" : "GET",
				      "port" : 80,
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "Host" : "foo.com",
					      "Accept-Language" : "en"
				      },
				      "protocol" : "http"
			      }
		      }
	      ],
	      "remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	      "issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	      "inScope" : false,
	      "host" : "foo.com",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "issueType" : 6291968,
	      "protocol" : "http",
	      "name" : "Email addresses disclosed",
	      "issueDetail" : "The following email address was disclosed in the response:<ul><li>peter09@thoeny.org</li></ul>",
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/StandardColors"
      },
      {
	      "name" : "Frameable response (potential Clickjacking)",
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/TWikiSite",
	      "issueType" : 5245344,
	      "protocol" : "http",
	      "confidence" : "Firm",
	      "severity" : "Information",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/cgi-bin/view/TWiki/TWikiSite",
				      "protocol" : "http",
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/TWikiSite",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1"
			      },
			      "response" : {
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "HTML",
				      "port" : 80,
				      "messageType" : "response",
				      "protocol" : "http",
				      "headers" : {
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Date" : "Wed, 08 Jun 2016 16:33:59 GMT",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Content-Length" : "57658"
				      },
				      "cookies" : [],
				      "statusCode" : 200,
				      "body" : "",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com"
			      },
			      "messageType" : "requestResponse"
		      }
	      ]
      },
      {
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	      "remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/TWikiSite",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http",
				      "path" : "/cgi-bin/view/TWiki/TWikiSite",
				      "port" : 80,
				      "messageType" : "request",
				      "method" : "GET"
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "messageType" : "response",
				      "port" : 80,
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "57658",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:33:59 GMT",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8"
				      },
				      "protocol" : "http",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "body" : "",
				      "statusCode" : 200
			      }
		      }
	      ],
	      "issueType" : 6291968,
	      "protocol" : "http",
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "name" : "Email addresses disclosed",
	      "issueDetail" : "The following email address was disclosed in the response:<ul><li>peter09@thoeny.org</li></ul>",
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/TWikiSite"
      },
      {
	      "protocol" : "http",
	      "issueType" : 5245344,
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "severity" : "Information",
	      "confidence" : "Firm",
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/TWikiSiteTools",
	      "name" : "Frameable response (potential Clickjacking)",
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "inScope" : false,
	      "host" : "foo.com",
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/TWikiSiteTools",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "protocol" : "http",
				      "path" : "/cgi-bin/view/TWiki/TWikiSiteTools",
				      "messageType" : "request",
				      "method" : "GET",
				      "port" : 80,
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com"
			      },
			      "response" : {
				      "port" : 80,
				      "messageType" : "response",
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:25:58 GMT",
					      "Content-Length" : "95532"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "statusCode" : 200,
				      "body" : ""
			      },
			      "messageType" : "requestResponse"
		      }
	      ]
      },
      {
	      "inScope" : false,
	      "issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	      "host" : "foo.com",
	      "remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*"
				      },
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/cgi-bin/view/TWiki/TWikiSiteTools",
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/TWikiSiteTools",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "httpVersion" : "HTTP/1.1",
				      "body" : ""
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "messageType" : "response",
				      "port" : 80,
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:25:58 GMT",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Content-Length" : "95532"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "statusCode" : 200,
				      "body" : ""
			      }
		      }
	      ],
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/TWikiSiteTools",
	      "issueDetail" : "The following email address was disclosed in the response:<ul><li>peter09@thoeny.org</li></ul>",
	      "name" : "Email addresses disclosed",
	      "protocol" : "http",
	      "issueType" : 6291968,
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "severity" : "Information",
	      "confidence" : "Certain"
      },
      {
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "statusCode" : 200,
				      "body" : "",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "protocol" : "http",
				      "headers" : {
					      "Content-Length" : "41239",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Date" : "Wed, 08 Jun 2016 16:36:17 GMT"
				      },
				      "cookies" : [],
				      "messageType" : "response",
				      "port" : 80
			      },
			      "request" : {
				      "protocol" : "http",
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "Accept-Language" : "en",
					      "Host" : "foo.com"
				      },
				      "port" : 80,
				      "messageType" : "request",
				      "method" : "GET",
				      "path" : "/cgi-bin/view/TWiki/WikiWikiClones",
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/WikiWikiClones",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "httpVersion" : "HTTP/1.1",
				      "body" : ""
			      }
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "inScope" : false,
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "host" : "foo.com",
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/WikiWikiClones",
	      "name" : "Frameable response (potential Clickjacking)",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "severity" : "Information",
	      "confidence" : "Firm",
	      "protocol" : "http",
	      "issueType" : 5245344
      },
      {
	      "protocol" : "http",
	      "issueType" : 6291968,
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "issueDetail" : "The following email address was disclosed in the response:<ul><li>peter09@thoeny.org</li></ul>",
	      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/WikiWikiClones",
	      "name" : "Email addresses disclosed",
	      "inScope" : false,
	      "issueBackground" : "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
	      "host" : "foo.com",
	      "remediationBackground" : "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
	      "requestResponses" : [
		      {
			      "response" : {
				      "messageType" : "response",
				      "port" : 80,
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "41239",
					      "Date" : "Wed, 08 Jun 2016 16:36:17 GMT",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Connection" : "close"
				      },
				      "protocol" : "http",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "HTML",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "body" : "",
				      "statusCode" : 200
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://twiki.org:80/cgi-bin/view/TWiki/WikiWikiClones",
				      "path" : "/cgi-bin/view/TWiki/WikiWikiClones",
				      "method" : "GET",
				      "messageType" : "request",
				      "port" : 80,
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept" : "*/*",
					      "Connection" : "close"
				      },
				      "protocol" : "http",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com"
			      }
		      }
	      ]
      },
      {
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "protocol" : "http",
	      "issueType" : 6292992,
	      "url" : "http://twiki.org:80/robots.txt",
	      "issueDetail" : "The web server contains a robots.txt file.",
	      "name" : "Robots.txt file",
	      "remediationBackground" : "<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "path" : "/robots.txt",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "headers" : {
					      "Connection" : "close",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://twiki.org:80/robots.txt"
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Last-Modified" : "Fri, 16 Oct 2015 03:53:01 GMT",
					      "Date" : "Wed, 08 Jun 2016 16:14:39 GMT",
					      "ETag" : "",
					      "Content-Length" : "2913",
					      "Content-Type" : "text/plain; charset=UTF-8",
					      "Connection" : "close",
					      "Server" : "Apache/2.2.3 (CentOS)",
					      "Accept-Ranges" : "bytes"
				      },
				      "port" : 80,
				      "messageType" : "response",
				      "mimeType" : "text",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "statusCode" : 200,
				      "body" : ""
			      }
		      }
	      ],
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>\n<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>"
      },
      {
	      "requestResponses" : [
		      {
			      "response" : {
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "body" : "",
				      "statusCode" : 200,
				      "headers" : {
					      "Content-Length" : "81",
					      "Connection" : "close",
					      "Content-Type" : "message/http",
					      "Date" : "Wed, 08 Jun 2016 16:15:15 GMT",
					      "Server" : "Apache/2.4.7 (Ubuntu)"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "port" : 80,
				      "messageType" : "response",
				      "mimeType" : "",
				      "toolFlag" : 16962,
				      "referenceID" : 0
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "method" : "TRACE",
				      "messageType" : "request",
				      "port" : 80,
				      "path" : "/",
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Cookie" : "0cf51917ab",
					      "Connection" : "close"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://www.apache.org:80/",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1"
			      }
		      }
	      ],
	      "remediationBackground" : "<p>The TRACE method should be disabled on production web servers.</p>",
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>The HTTP TRACE  method is designed for diagnostic purposes. If enabled, the web server will respond to requests that use the TRACE method by echoing in its response the exact request that was received.</p>\n<p>This behavior is often harmless, but occasionally leads to the disclosure of sensitive information such as internal authentication headers appended by reverse proxies. This functionality could historically be used to bypass the HttpOnly cookie flag on cookies, but this is no longer possible in modern web browsers. </p>",
	      "url" : "http://www.apache.org:80/",
	      "name" : "HTTP TRACE method is enabled",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "protocol" : "http",
	      "issueType" : 5245440
      },
      {
	      "name" : "Robots.txt file",
	      "url" : "http://www.apache.org:80/robots.txt",
	      "issueDetail" : "The web server contains a robots.txt file.",
	      "issueType" : 6292992,
	      "protocol" : "http",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueBackground" : "<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>\n<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>",
	      "inScope" : false,
	      "host" : "foo.com",
	      "remediationBackground" : "<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>",
	      "requestResponses" : [
		      {
			      "response" : {
				      "messageType" : "response",
				      "port" : 80,
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Expires" : "Wed, 08 Jun 2016 17:15:15 GMT",
					      "Date" : "Wed, 08 Jun 2016 16:15:15 GMT",
					      "Last-Modified" : "Tue, 17 Feb 2015 18:06:10 GMT",
					      "ETag" : "",
					      "Content-Length" : "47",
					      "Content-Type" : "text/plain",
					      "Connection" : "close",
					      "Accept-Ranges" : "bytes",
					      "Server" : "Apache/2.4.7 (Ubuntu)",
					      "Cache-Control" : "max-age=3600"
				      },
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "text",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "statusCode" : 200,
				      "body" : ""
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "path" : "/robots.txt",
				      "port" : 80,
				      "messageType" : "request",
				      "method" : "GET",
				      "headers" : {
					      "Connection" : "close",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://www.apache.org:80/robots.txt",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1"
			      }
		      }
	      ]
      },
      {
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/pub/infozip/UnZip.html",
				      "protocol" : "http",
				      "headers" : {
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Host" : "foo.com",
					      "Accept-Language" : "en"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://www.info-zip.org:80/pub/infozip/UnZip.html"
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "headers" : {
					      "Date" : "Wed, 08 Jun 2016 16:19:48 GMT",
					      "Last-Modified" : "Fri, 25 Mar 2011 13:37:34 GMT",
					      "Content-Length" : "16383",
					      "ETag" : "",
					      "Vary" : "Accept-Encoding",
					      "Accept-Ranges" : "bytes",
					      "Server" : "lighttpd/1.4.33",
					      "Content-Type" : "text/html",
					      "Connection" : "close"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "messageType" : "response",
				      "port" : 80,
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "body" : "",
				      "statusCode" : 200
			      }
		      }
	      ],
	      "remediationBackground" : "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
	      "issueType" : 5245344,
	      "protocol" : "http",
	      "confidence" : "Firm",
	      "severity" : "Information",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "name" : "Frameable response (potential Clickjacking)",
	      "url" : "http://www.info-zip.org:80/pub/infozip/UnZip.html"
      },
      {
	      "name" : "Robots.txt file",
	      "url" : "http://www.info-zip.org:80/robots.txt",
	      "issueDetail" : "The web server contains a robots.txt file.",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "issueType" : 6292992,
	      "protocol" : "http",
	      "remediationBackground" : "<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "path" : "/robots.txt",
				      "messageType" : "request",
				      "method" : "GET",
				      "port" : 80,
				      "headers" : {
					      "Host" : "foo.com",
					      "Connection" : "close"
				      },
				      "protocol" : "http",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://www.info-zip.org:80/robots.txt",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1"
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "statusCode" : 200,
				      "body" : "",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "mimeType" : "text",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "protocol" : "http",
				      "headers" : {
					      "Connection" : "close",
					      "Content-Type" : "text/plain",
					      "Accept-Ranges" : "bytes",
					      "Server" : "lighttpd/1.4.33",
					      "Date" : "Wed, 08 Jun 2016 16:19:49 GMT",
					      "Last-Modified" : "Fri, 08 Jul 2011 14:48:06 GMT",
					      "ETag" : "",
					      "Content-Length" : "51"
				      },
				      "cookies" : [],
				      "messageType" : "response",
				      "port" : 80
			      }
		      }
	      ],
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>\n<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>"
      },
      {
	      "name" : "Silverlight cross-domain policy",
	      "issueDetail" : "The application publishes a Silverlight cross-domain policy which allows access from specific subdomains.<br><br>Allowing access from specific domains means that web sites on those domains can perform two-way interaction with this application. You should only use this policy if you fully trust the specific domains allowed by the policy.",
	      "url" : "http://www.microsoft.com:80/clientaccesspolicy.xml",
	      "issueType" : 2098432,
	      "protocol" : "http",
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>The Silverlight cross-domain policy controls whether Silverlight client components running on other domains can perform two-way interaction with the domain that publishes the policy. If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially gain full access to the application within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by a third-party attacker to exploit the trust relationship and attack the application that allows access. Any domains that are allowed by the Silverlight cross-domain policy should be reviewed to determine whether it is appropriate for the application to fully trust both their intentions and security posture. </p>",
	      "remediationBackground" : "<p>Any inappropriate entries in the Silverlight cross-domain policy file should be removed.</p>",
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "mimeType" : "XML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "cookies" : [],
				      "headers" : {
					      "X-CCC" : "DE",
					      "Content-Type" : "text/xml",
					      "Connection" : "close",
					      "Server" : "Microsoft-IIS/8.5",
					      "Cache-Control" : "max-age=889",
					      "X-CID" : "2",
					      "P3P" : "CP=\"ALL IND DSP COR ADM CONo CUR CUSo IVAo IVDo PSA PSD TAI TELo OUR SAMo CNT COM INT NAV ONL PHY PRE PUR UNI\"",
					      "VTag" : "279305555500000000",
					      "Date" : "Wed, 08 Jun 2016 16:24:52 GMT",
					      "Last-Modified" : "Tue, 12 May 2009 23:10:10 GMT",
					      "X-Powered-By" : "ASP.NET",
					      "Content-Length" : "572",
					      "ETag" : ""
				      },
				      "protocol" : "http",
				      "messageType" : "response",
				      "port" : 80,
				      "body" : "",
				      "statusCode" : 200,
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : ""
			      },
			      "request" : {
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://www.microsoft.com:80/clientaccesspolicy.xml",
				      "messageType" : "request",
				      "method" : "GET",
				      "port" : 80,
				      "path" : "/clientaccesspolicy.xml",
				      "protocol" : "http",
				      "headers" : {
					      "Connection" : "close",
					      "Host" : "foo.com"
				      }
			      }
		      }
	      ]
      },
      {
	      "requestResponses" : [
		      {
			      "response" : {
				      "messageType" : "response",
				      "port" : 80,
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "VTag" : "438473457600000000",
					      "Date" : "Wed, 08 Jun 2016 16:24:51 GMT",
					      "Content-Length" : "75",
					      "X-Powered-By" : "ASP.NET",
					      "Server" : "Microsoft-IIS/8.5",
					      "X-CCC" : "DE",
					      "Content-Type" : "text/html",
					      "Connection" : "close",
					      "X-CID" : "2"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "statusCode" : 500,
				      "body" : ""
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://www.microsoft.com:80/ntserver/partners",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/ntserver/partners",
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*"
				      },
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : ""
			      }
		      }
	      ],
	      "remediationBackground" : "<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>",
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>If a  response specifies an incorrect content type, then browsers may process the response in unexpected ways. If the specified content type is a renderable text-based format, then the browser will usually attempt to parse and render the response in that format. If the specified type is an image format, then the browser will usually detect the anomaly and will analyze the actual content and attempt to determine its MIME type. Either case can lead to unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>\n<p>In most cases, the presence of an incorrect content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>",
	      "name" : "Content type incorrectly stated",
	      "issueDetail" : "The response contains the following Content-type statement:<ul><li>Content-Type: text/html</li></ul>The response states that it contains <b>HTML</b>. However, it actually appears to contain <b>plain text</b>.",
	      "url" : "http://www.microsoft.com:80/ntserver/partners",
	      "severity" : "Information",
	      "confidence" : "Firm",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "issueType" : 8389632,
	      "protocol" : "http"
      },
      {
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "protocol" : "http",
	      "issueType" : 8389120,
	      "url" : "http://www.microsoft.com:80/ntserver/partners",
	      "name" : "HTML does not specify charset",
	      "remediationBackground" : "<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\n</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "url" : "http://www.microsoft.com:80/ntserver/partners",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*"
				      },
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/ntserver/partners",
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com"
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "HTML",
				      "messageType" : "response",
				      "port" : 80,
				      "protocol" : "http",
				      "headers" : {
					      "X-CID" : "2",
					      "X-CCC" : "DE",
					      "Content-Type" : "text/html",
					      "Connection" : "close",
					      "Server" : "Microsoft-IIS/8.5",
					      "X-Powered-By" : "ASP.NET",
					      "Content-Length" : "75",
					      "Date" : "Wed, 08 Jun 2016 16:24:51 GMT",
					      "VTag" : "438473457600000000"
				      },
				      "cookies" : [],
				      "statusCode" : 500,
				      "body" : "",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com"
			      }
		      }
	      ],
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\n<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>"
      },
      {
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "severity" : "High",
	      "confidence" : "Tentative",
	      "protocol" : "http",
	      "issueType" : 1049088,
	      "issueDetail" : "The name of an arbitrarily supplied URL parameter appears to be vulnerable to SQL injection attacks. The payloads <b>43316382' or '9641'='9641</b> and <b>43316382' or '9641'='9642</b> were each submitted in the name of an arbitrarily supplied URL parameter. These two requests resulted in different responses, indicating that the input is being incorporated into a SQL query in an unsafe way. <br><br>Note that automated difference-based tests for SQL injection flaws can often be unreliable and are prone to false positive results. You should manually review the reported requests and responses to confirm whether a vulnerability is actually present.",
	      "url" : "http://www.microsoft.com:80/ntserver/partners",
	      "name" : "SQL injection",
	      "remediationBackground" : "<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>\n<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>\n<ul>\n  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li><li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>\n</ul>",
	      "requestResponses" : [
		      {
			      "response" : {
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "statusCode" : 403,
				      "body" : "",
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Mime-Version" : "1.0",
					      "Server" : "AkamaiGHost",
					      "Content-Type" : "text/html",
					      "Connection" : "close",
					      "X-CCC" : "CH",
					      "X-CID" : "2",
					      "Date" : "Wed, 08 Jun 2016 16:24:58 GMT",
					      "Expires" : "Wed, 08 Jun 2016 16:24:58 GMT",
					      "Content-Length" : "293"
				      },
				      "port" : 80,
				      "messageType" : "response",
				      "mimeType" : "HTML",
				      "referenceID" : 0,
				      "toolFlag" : 16962
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "messageType" : "request",
				      "query" : "143316382'%20or%20'9641'%3d'9641=1",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/ntserver/partners",
				      "protocol" : "http",
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://www.microsoft.com:80/ntserver/partners?143316382'%20or%20'9641'%3d'9641=1",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1"
			      }
		      },
		      {
			      "request" : {
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "messageType" : "request",
				      "query" : "143316382'%20or%20'9641'%3d'9642=1",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/ntserver/partners",
				      "url" : "http://www.microsoft.com:80/ntserver/partners?143316382'%20or%20'9641'%3d'9642=1",
				      "referenceID" : 0,
				      "toolFlag" : 16962
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "body" : "",
				      "statusCode" : 500,
				      "port" : 80,
				      "messageType" : "response",
				      "headers" : {
					      "Content-Type" : "text/html",
					      "Connection" : "close",
					      "X-CCC" : "DE",
					      "Server" : "Microsoft-IIS/8.0",
					      "X-CID" : "2",
					      "Date" : "Wed, 08 Jun 2016 16:24:59 GMT",
					      "VTag" : "43865625400000000",
					      "X-Powered-By" : "ASP.NET",
					      "Content-Length" : "75"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML"
			      }
		      }
	      ],
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>\n<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>"
      },
      {
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "protocol" : "http",
	      "issueType" : 6292992,
	      "issueDetail" : "The web server contains a robots.txt file.",
	      "url" : "http://www.microsoft.com:80/robots.txt",
	      "name" : "Robots.txt file",
	      "remediationBackground" : "<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>",
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "statusCode" : 200,
				      "body" : "",
				      "messageType" : "response",
				      "port" : 80,
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "4401",
					      "X-Powered-By" : "ASP.NET",
					      "ETag" : "",
					      "Date" : "Wed, 08 Jun 2016 16:24:52 GMT",
					      "VTag" : "43861427800000000",
					      "Last-Modified" : "Wed, 20 Jan 2016 01:56:48 GMT",
					      "X-CID" : "2",
					      "P3P" : "CP=\"ALL IND DSP COR ADM CONo CUR CUSo IVAo IVDo PSA PSD TAI TELo OUR SAMo CNT COM INT NAV ONL PHY PRE PUR UNI\"",
					      "Cache-Control" : "max-age=633",
					      "Server" : "Microsoft-IIS/8.5",
					      "X-CCC" : "DE",
					      "Content-Type" : "text/plain",
					      "Connection" : "close"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "text"
			      },
			      "request" : {
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "url" : "http://www.microsoft.com:80/robots.txt",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "headers" : {
					      "Host" : "foo.com",
					      "Connection" : "close"
				      },
				      "protocol" : "http",
				      "path" : "/robots.txt",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET"
			      }
		      }
	      ],
	      "inScope" : false,
	      "issueBackground" : "<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>\n<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>",
	      "host" : "foo.com"
      },
      {
	      "remediationBackground" : "<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\n</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://www.simtel.net:80/",
				      "port" : 80,
				      "messageType" : "request",
				      "method" : "GET",
				      "path" : "/",
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Connection" : "close",
					      "Accept" : "*/*"
				      }
			      },
			      "response" : {
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "body" : "",
				      "statusCode" : 200,
				      "headers" : {
					      "Expires" : "Wed, 08 Jun 2016 16:16:54 GMT",
					      "Date" : "Wed, 08 Jun 2016 16:16:55 GMT",
					      "Vary" : "Accept-Encoding",
					      "Content-Length" : "289",
					      "Content-Type" : "text/html",
					      "Connection" : "close",
					      "Server" : "nginx",
					      "Cache-Control" : "no-cache"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "messageType" : "response",
				      "port" : 80,
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0
			      },
			      "messageType" : "requestResponse"
		      }
	      ],
	      "inScope" : false,
	      "issueBackground" : "<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\n<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>",
	      "host" : "foo.com",
	      "url" : "http://www.simtel.net:80/",
	      "name" : "HTML does not specify charset",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "protocol" : "http",
	      "issueType" : 8389120
      },
      {
	      "issueBackground" : "<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>\n<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>",
	      "inScope" : false,
	      "host" : "foo.com",
	      "requestResponses" : [
		      {
			      "request" : {
				      "url" : "http://www.simtel.net:80/robots.txt",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "headers" : {
					      "Connection" : "close",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http",
				      "path" : "/robots.txt",
				      "messageType" : "request",
				      "method" : "GET",
				      "port" : 80,
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : ""
			      },
			      "response" : {
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "Content-Length" : "25",
					      "ETag" : "",
					      "Last-Modified" : "Sat, 24 Aug 2013 10:10:43 GMT",
					      "Date" : "Wed, 08 Jun 2016 16:21:18 GMT",
					      "Server" : "nginx",
					      "Accept-Ranges" : "bytes",
					      "Connection" : "close",
					      "Content-Type" : "text/plain"
				      },
				      "messageType" : "response",
				      "port" : 80,
				      "mimeType" : "text",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "statusCode" : 200,
				      "body" : ""
			      },
			      "messageType" : "requestResponse"
		      }
	      ],
	      "remediationBackground" : "<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>",
	      "issueDetail" : "The web server contains a robots.txt file.",
	      "url" : "http://www.simtel.net:80/robots.txt",
	      "name" : "Robots.txt file",
	      "protocol" : "http",
	      "issueType" : 6292992,
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "confidence" : "Certain",
	      "severity" : "Information"
      },
      {
	      "issueType" : 6292992,
	      "protocol" : "http",
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "name" : "Robots.txt file",
	      "url" : "http://www.w3.org:80/robots.txt",
	      "issueDetail" : "The web server contains a robots.txt file.",
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>\n<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>",
	      "remediationBackground" : "<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/robots.txt",
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Connection" : "close"
				      },
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://www.w3.org:80/robots.txt"
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "text",
				      "port" : 80,
				      "messageType" : "response",
				      "protocol" : "http",
				      "cookies" : [],
				      "headers" : {
					      "P3P" : "policyref=\"http://www.w3.org/2014/08/p3p.xml\"",
					      "Cache-Control" : "max-age=21600",
					      "Accept-Ranges" : "bytes",
					      "Content-Type" : "text/plain",
					      "Connection" : "close",
					      "ETag" : "",
					      "Content-Length" : "2933",
					      "Vary" : "upgrade-insecure-requests",
					      "Last-Modified" : "Thu, 11 Feb 2016 20:30:26 GMT",
					      "Date" : "Wed, 08 Jun 2016 16:40:11 GMT",
					      "Expires" : "Wed, 08 Jun 2016 22:40:11 GMT"
				      },
				      "statusCode" : 200,
				      "body" : "",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com"
			      }
		      }
	      ]
      },
      {
	      "name" : "Cookie without HttpOnly flag set",
	      "issueDetail" : "The following cookie was issued by the application and does not have the HttpOnly flag set:<ul><li>AWSELB=5D91EDED1E7336EC3BB28FBEBDBDD77CE4628BD79A01FD9B040555B763D62C8A52BE7CDD325B3285062814C74632C400A69EAC4D87CF1DAD619C343B8EC884E26A42964048;PATH=/;MAX-AGE=900</li></ul>The cookie does not appear to contain a session token, which may reduce the risk associated with this issue. You should review the contents of the cookie to determine its function.",
	      "url" : "http://www.winzip.com:80/",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueType" : 5244416,
	      "protocol" : "http",
	      "remediationBackground" : "<p>There is usually no good reason not to set the HttpOnly flag on all cookies. Unless you specifically require legitimate client-side scripts within your application to read or set a cookie's value, you should set the HttpOnly flag by including this attribute within the relevant Set-cookie directive.</p>\n<p>You should be aware that the restrictions imposed by the HttpOnly flag can potentially be circumvented in some circumstances, and that numerous other serious attacks can be delivered by client-side script injection, aside from simple cookie stealing. </p>",
	      "requestResponses" : [
		      {
			      "response" : {
				      "body" : "",
				      "statusCode" : 302,
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML",
				      "port" : 80,
				      "messageType" : "response",
				      "headers" : {
					      "Date" : "Wed, 08 Jun 2016 16:14:20 GMT",
					      "Location" : "http://www.winzip.com/win/en/index.htm",
					      "Content-Length" : "0",
					      "Server" : "nginx/1.2.1",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=utf-8",
					      "Set-Cookie" : "AWSELB=5D91EDED1E7336EC3BB28FBEBDBDD77CE4628BD79A01FD9B040555B763D62C8A52BE7CDD325B3285062814C74632C400A69EAC4D87CF1DAD619C343B8EC884E26A42964048;PATH=/;MAX-AGE=900",
					      "Cache-Control" : "no-cache=\"set-cookie\""
				      },
				      "cookies" : [
					      {
						      "value" : "",
						      "name" : "AWSELB"
					      }
				      ],
				      "protocol" : "http"
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "url" : "http://www.winzip.com:80/",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "headers" : {
					      "Connection" : "close",
					      "Accept" : "*/*",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Host" : "foo.com",
					      "Accept-Language" : "en"
				      },
				      "protocol" : "http",
				      "path" : "/",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET"
			      }
		      }
	      ],
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>If the HttpOnly attribute is set on a cookie, then the cookie's value cannot be read or set by client-side JavaScript. This measure makes certain client-side attacks, such as cross-site scripting, slightly harder to exploit by preventing them from trivially capturing the cookie's value via an injected script.</p>"
      },
      {
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.</p>\n<p>This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.</p>\n<p>To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser. </p>",
	      "requestResponses" : [
		      {
			      "messageType" : "requestResponse",
			      "response" : {
				      "body" : "",
				      "statusCode" : 302,
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "HTML",
				      "messageType" : "response",
				      "port" : 80,
				      "headers" : {
					      "Content-Length" : "0",
					      "Location" : "http://www.winzip.com/win/en/index.htm",
					      "Date" : "Wed, 08 Jun 2016 16:14:20 GMT",
					      "Cache-Control" : "no-cache=\"set-cookie\"",
					      "Set-Cookie" : "AWSELB=5D91EDED1E7336EC3BB28FBEBDBDD77CE4628BD79A01FD9B040555B763D62C8A52BE7CDD325B3285062814C74632C400A69EAC4D87CF1DAD619C343B8EC884E26A42964048;PATH=/;MAX-AGE=900",
					      "Content-Type" : "text/html; charset=utf-8",
					      "Connection" : "close",
					      "Server" : "nginx/1.2.1"
				      },
				      "cookies" : [
					      {
						      "name" : "AWSELB",
						      "value" : ""
					      }
				      ],
				      "protocol" : "http"
			      },
			      "request" : {
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "path" : "/",
				      "method" : "GET",
				      "messageType" : "request",
				      "port" : 80,
				      "headers" : {
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Host" : "foo.com",
					      "Accept-Language" : "en"
				      },
				      "protocol" : "http",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://www.winzip.com:80/"
			      }
		      },
		      {
			      "response" : {
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "body" : "",
				      "statusCode" : 302,
				      "messageType" : "response",
				      "port" : 80,
				      "cookies" : [
					      {
						      "name" : "AWSELB",
						      "value" : ""
					      }
				      ],
				      "headers" : {
					      "Cache-Control" : "no-cache=\"set-cookie\"",
					      "Set-Cookie" : "AWSELB=5D91EDED1E7336EC3BB28FBEBDBDD77CE4628BD79AF5473C3866A93AA3054E8A7747DB390555FCA1C94D70ADC6005EB6539574CD258BBE627D61160257893AC9CD9F38EBFD;PATH=/;MAX-AGE=900",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=utf-8",
					      "Server" : "nginx/1.2.1",
					      "Content-Length" : "0",
					      "Location" : "http://www.winzip.com/mobile/index.html",
					      "Date" : "Wed, 08 Jun 2016 16:15:09 GMT"
				      },
				      "protocol" : "http",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "mimeType" : "HTML"
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "url" : "http://www.winzip.com:80/",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "protocol" : "http",
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "User-Agent" : "Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3",
					      "Accept" : "*/*",
					      "Connection" : "close"
				      },
				      "messageType" : "request",
				      "method" : "GET",
				      "port" : 80,
				      "path" : "/"
			      }
		      }
	      ],
	      "protocol" : "http",
	      "issueType" : 4194592,
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "confidence" : "Firm",
	      "severity" : "Information",
	      "url" : "http://www.winzip.com:80/",
	      "name" : "User agent-dependent response"
      },
      {
	      "remediationBackground" : "<p>By default, cookies are scoped to the issuing domain and all subdomains. If you remove the explicit domain attribute from your Set-cookie directive, then the cookie will have this default scope, which is safe and appropriate in most situations. If you particularly need a cookie to be accessible by a parent domain, then you should thoroughly review the security of the applications residing on that domain and its subdomains, and confirm that you are willing to trust the people and systems that support those applications.</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "messageType" : "request",
				      "port" : 80,
				      "method" : "GET",
				      "path" : "/",
				      "protocol" : "http",
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"
				      },
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "url" : "http://www.youtube.com:80/"
			      },
			      "response" : {
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "protocol" : "http",
				      "cookies" : [
					      {
						      "domain" : "youtube.com",
						      "name" : "VISITOR_INFO1_LIVE",
						      "expiration" : "Feb 7, 2017 4:35:40 AM",
						      "value" : ""
					      },
					      {
						      "domain" : "youtube.com",
						      "name" : "YSC",
						      "value" : ""
					      }
				      ],
				      "headers" : {
					      "Expires" : "Tue, 27 Apr 1971 19:44:06 EST",
					      "Location" : "https://www.youtube.com/",
					      "X-Content-Type-Options" : "nosniff",
					      "Date" : "Wed, 08 Jun 2016 16:42:40 GMT",
					      "Content-Length" : "0",
					      "X-XSS-Protection" : "1; mode=block; report=https://www.google.com/appserve/security-bugs/log/youtube",
					      "Content-Type" : "text/html; charset=utf-8",
					      "Connection" : "close",
					      "Server" : "YouTubeFrontEnd",
					      "Cache-Control" : "no-cache",
					      "P3P" : "CP=\"This is not a P3P policy! See http://support.google.com/accounts/answer/151657?hl=en for more info.\"",
					      "Set-Cookie" : "YSC=fRHlyRP576c; path=/; domain=.youtube.com; httponly"
				      },
				      "port" : 80,
				      "messageType" : "response",
				      "statusCode" : 301,
				      "body" : "",
				      "raw" : "",
				      "inScope" : false,
				      "host" : "foo.com"
			      },
			      "messageType" : "requestResponse"
		      }
	      ],
	      "issueBackground" : "<p>A cookie's domain attribute determines which domains can access the cookie. Browsers will automatically submit the cookie in requests to in-scope domains, and those domains will also be able to access the cookie via JavaScript. If a cookie is scoped to a parent domain, then that cookie will be accessible by the parent domain and also by any other subdomains of the parent domain. If the cookie contains sensitive data (such as a session token) then this data may be accessible by less trusted or less secure applications residing at those domains, leading to a security compromise.</p>",
	      "inScope" : false,
	      "host" : "foo.com",
	      "name" : "Cookie scoped to parent domain",
	      "issueDetail" : "The following cookies were issued by the application and is scoped to a parent of the issuing domain:<ul><li>VISITOR_INFO1_LIVE=M1-Av9anGz0; path=/; domain=.youtube.com; expires=Tue, 07-Feb-2017 04:35:40 GMT; httponly</li><li>YSC=fRHlyRP576c; path=/; domain=.youtube.com; httponly</li></ul>The cookies do not appear to contain session tokens, which may reduce the risk associated with this issue. You should review the contents of the cookies to determine their function.",
	      "url" : "http://www.youtube.com:80/",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "issueType" : 5243648,
	      "protocol" : "http"
      },
      {
	      "severity" : "Information",
	      "confidence" : "Firm",
	      "messageType" : "scanIssue",
	      "port" : 80,
	      "issueType" : 4194592,
	      "protocol" : "http",
	      "name" : "User agent-dependent response",
	      "url" : "http://www.youtube.com:80/",
	      "requestResponses" : [
		      {
			      "response" : {
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "cookies" : [
					      {
						      "name" : "VISITOR_INFO1_LIVE",
						      "domain" : "youtube.com",
						      "value" : "",
						      "expiration" : "Feb 7, 2017 4:35:40 AM"
					      },
					      {
						      "value" : "",
						      "name" : "YSC",
						      "domain" : "youtube.com"
					      }
				      ],
				      "headers" : {
					      "X-Content-Type-Options" : "nosniff",
					      "Date" : "Wed, 08 Jun 2016 16:42:40 GMT",
					      "Location" : "https://www.youtube.com/",
					      "Expires" : "Tue, 27 Apr 1971 19:44:06 EST",
					      "X-XSS-Protection" : "1; mode=block; report=https://www.google.com/appserve/security-bugs/log/youtube",
					      "Content-Length" : "0",
					      "Server" : "YouTubeFrontEnd",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=utf-8",
					      "Set-Cookie" : "YSC=fRHlyRP576c; path=/; domain=.youtube.com; httponly",
					      "P3P" : "CP=\"This is not a P3P policy! See http://support.google.com/accounts/answer/151657?hl=en for more info.\"",
					      "Cache-Control" : "no-cache"
				      },
				      "protocol" : "http",
				      "messageType" : "response",
				      "port" : 80,
				      "body" : "",
				      "statusCode" : 301,
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : ""
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "path" : "/",
				      "method" : "GET",
				      "messageType" : "request",
				      "port" : 80,
				      "headers" : {
					      "Accept-Language" : "en",
					      "Host" : "foo.com",
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept" : "*/*",
					      "Connection" : "close"
				      },
				      "protocol" : "http",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://www.youtube.com:80/"
			      }
		      },
		      {
			      "response" : {
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "body" : "",
				      "statusCode" : 302,
				      "messageType" : "response",
				      "port" : 80,
				      "headers" : {
					      "Content-Length" : "0",
					      "X-XSS-Protection" : "1; mode=block; report=https://www.google.com/appserve/security-bugs/log/youtube",
					      "Expires" : "Tue, 27 Apr 1971 19:44:06 EST",
					      "Location" : "https://m.youtube.com/?",
					      "Date" : "Wed, 08 Jun 2016 16:42:51 GMT",
					      "X-Content-Type-Options" : "nosniff",
					      "Cache-Control" : "no-cache",
					      "P3P" : "CP=\"This is not a P3P policy! See http://support.google.com/accounts/answer/151657?hl=en for more info.\"",
					      "Set-Cookie" : "VISITOR_INFO1_LIVE=TJxcJPPnkuA; path=/; domain=.youtube.com; expires=Tue, 07-Feb-2017 04:35:51 GMT; httponly",
					      "Content-Type" : "text/html; charset=utf-8",
					      "Connection" : "close",
					      "Server" : "YouTubeFrontEnd"
				      },
				      "cookies" : [
					      {
						      "value" : "",
						      "name" : "YSC",
						      "domain" : "youtube.com"
					      },
					      {
						      "domain" : "youtube.com",
						      "name" : "PREF",
						      "expiration" : "Feb 7, 2017 4:35:51 AM",
						      "value" : ""
					      },
					      {
						      "name" : "VISITOR_INFO1_LIVE",
						      "domain" : "youtube.com",
						      "expiration" : "Feb 7, 2017 4:35:51 AM",
						      "value" : ""
					      }
				      ],
				      "protocol" : "http",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "mimeType" : "HTML"
			      },
			      "messageType" : "requestResponse",
			      "request" : {
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "method" : "GET",
				      "messageType" : "request",
				      "port" : 80,
				      "path" : "/",
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Accept-Language" : "en",
					      "User-Agent" : "Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3",
					      "Accept" : "*/*",
					      "Connection" : "close"
				      },
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://www.youtube.com:80/"
			      }
		      }
	      ],
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.</p>\n<p>This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.</p>\n<p>To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser. </p>"
      },
      {
	      "url" : "http://www.youtube.com:80/crossdomain.xml",
	      "issueDetail" : "The application publishes a Flash cross-domain policy which uses a wildcard to specify allowed domains, and allows access from specific other domains.<br><br>Using a wildcard to specify allowed domains means that any domain matching the wildcard expression can perform two-way interaction with this application. You should only use this policy if you fully trust every possible web site that may reside on a domain which matches the wildcard expression.<br><br>Allowing access from specific domains means that web sites on those domains can perform two-way interaction with this application. You should only use this policy if you fully trust the specific domains allowed by the policy.",
	      "name" : "Flash cross-domain policy",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "severity" : "Low",
	      "confidence" : "Certain",
	      "protocol" : "http",
	      "issueType" : 2098176,
	      "remediationBackground" : "<p>Any inappropriate entries in the Flash cross-domain policy file should be removed.</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://www.youtube.com:80/crossdomain.xml",
				      "path" : "/crossdomain.xml",
				      "method" : "GET",
				      "messageType" : "request",
				      "port" : 80,
				      "headers" : {
					      "Connection" : "close",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : ""
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "body" : "",
				      "statusCode" : 200,
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "mimeType" : "",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "cookies" : [],
				      "headers" : {
					      "Date" : "Wed, 08 Jun 2016 11:14:50 GMT",
					      "X-Content-Type-Options" : "nosniff",
					      "Last-Modified" : "Thu, 21 Apr 2016 03:17:22 GMT",
					      "Expires" : "Thu, 09 Jun 2016 11:14:50 GMT",
					      "X-XSS-Protection" : "1; mode=block",
					      "Vary" : "Accept-Encoding",
					      "Accept-Ranges" : "none",
					      "Server" : "sffe",
					      "Age" : "19670",
					      "Connection" : "close",
					      "Content-Type" : "text/x-cross-domain-policy",
					      "Cache-Control" : "public, max-age=86400"
				      },
				      "protocol" : "http",
				      "messageType" : "response",
				      "port" : 80
			      }
		      }
	      ],
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>The Flash cross-domain policy controls whether Flash client components running on other domains can perform two-way interaction with the domain that publishes the policy. If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially gain full access to the application within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by a third-party attacker to exploit the trust relationship and attack the application that allows access. Any domains that are allowed by the Flash cross-domain policy should be reviewed to determine whether it is appropriate for the application to fully trust both their intentions and security posture. </p>"
      },
      {
	      "name" : "Robots.txt file",
	      "url" : "http://www.youtube.com:80/robots.txt",
	      "issueDetail" : "The web server contains a robots.txt file.",
	      "issueType" : 6292992,
	      "protocol" : "http",
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "inScope" : false,
	      "host" : "foo.com",
	      "issueBackground" : "<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>\n<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>",
	      "remediationBackground" : "<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://www.youtube.com:80/robots.txt",
				      "port" : 80,
				      "messageType" : "request",
				      "method" : "GET",
				      "path" : "/robots.txt",
				      "protocol" : "http",
				      "headers" : {
					      "Host" : "foo.com",
					      "Connection" : "close"
				      }
			      },
			      "response" : {
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com",
				      "statusCode" : 200,
				      "body" : "",
				      "protocol" : "http",
				      "headers" : {
					      "Accept-Ranges" : "none",
					      "Server" : "sffe",
					      "Content-Type" : "text/plain",
					      "Connection" : "close",
					      "Cache-Control" : "public, max-age=0",
					      "Date" : "Wed, 08 Jun 2016 16:42:40 GMT",
					      "X-Content-Type-Options" : "nosniff",
					      "Last-Modified" : "Thu, 21 Apr 2016 03:17:22 GMT",
					      "Expires" : "Wed, 08 Jun 2016 16:42:40 GMT",
					      "X-XSS-Protection" : "1; mode=block",
					      "Vary" : "Accept-Encoding"
				      },
				      "cookies" : [],
				      "messageType" : "response",
				      "port" : 80,
				      "mimeType" : "text",
				      "toolFlag" : 16962,
				      "referenceID" : 0
			      },
			      "messageType" : "requestResponse"
		      }
	      ]
      },
      {
	      "url" : "http://yourdomain.com:80/bin/testenv",
	      "issueDetail" : "The following cookie was issued by the application and does not have the HttpOnly flag set:<ul><li>__tad=1465402550.7067999; expires=Sat, 06-Jun-2026 16:15:50 GMT</li></ul>The cookie does not appear to contain a session token, which may reduce the risk associated with this issue. You should review the contents of the cookie to determine its function.",
	      "name" : "Cookie without HttpOnly flag set",
	      "protocol" : "http",
	      "issueType" : 5244416,
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "confidence" : "Certain",
	      "severity" : "Information",
	      "inScope" : false,
	      "issueBackground" : "<p>If the HttpOnly attribute is set on a cookie, then the cookie's value cannot be read or set by client-side JavaScript. This measure makes certain client-side attacks, such as cross-site scripting, slightly harder to exploit by preventing them from trivially capturing the cookie's value via an injected script.</p>",
	      "host" : "foo.com",
	      "remediationBackground" : "<p>There is usually no good reason not to set the HttpOnly flag on all cookies. Unless you specifically require legitimate client-side scripts within your application to read or set a cookie's value, you should set the HttpOnly flag by including this attribute within the relevant Set-cookie directive.</p>\n<p>You should be aware that the restrictions imposed by the HttpOnly flag can potentially be circumvented in some circumstances, and that numerous other serious attacks can be delivered by client-side script injection, aside from simple cookie stealing. </p>",
	      "requestResponses" : [
		      {
			      "request" : {
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : "",
				      "body" : "",
				      "httpVersion" : "HTTP/1.1",
				      "path" : "/bin/testenv",
				      "port" : 80,
				      "messageType" : "request",
				      "method" : "GET",
				      "headers" : {
					      "User-Agent" : "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
					      "Accept" : "*/*",
					      "Connection" : "close",
					      "Host" : "foo.com",
					      "Accept-Language" : "en"
				      },
				      "protocol" : "http",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "url" : "http://yourdomain.com:80/bin/testenv"
			      },
			      "messageType" : "requestResponse",
			      "response" : {
				      "statusCode" : 302,
				      "body" : "",
				      "inScope" : false,
				      "host" : "foo.com",
				      "raw" : "",
				      "mimeType" : "HTML",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "protocol" : "http",
				      "cookies" : [
					      {
						      "expiration" : "Jun 6, 2026 4:15:50 PM",
						      "value" : "",
						      "name" : "__tad"
					      }
				      ],
				      "headers" : {
					      "Server" : "Apache",
					      "Connection" : "close",
					      "Content-Type" : "text/html; charset=UTF-8",
					      "Set-Cookie" : "__tad=1465402550.7067999; expires=Sat, 06-Jun-2026 16:15:50 GMT",
					      "Date" : "Wed, 08 Jun 2016 16:15:50 GMT",
					      "Location" : "http://bidr.trellian.com/r2.php?e=YPEC5m4ENXkTeshL2U8CDen9RZjEHjL1SVjji92LDMnJj2WfhiF%2FGs2o8%2F7%2FIsmPr6h9yJowcPDwdXvTxcJc2KRJmQhzqLSm7v%2FwO4wkWJoPcupI%2FBcMFE9LMyyW83ZIvrZnE5ZCYw1Xbayy5RfW74luUwaZjRChlejTm7ZA0az%2FKhMd7TxIuz93O9pxWNiFGXtP1XBNuWCEMny0T9sdS8PlTYbPlLMaAkYHBKWyiUgoia0tDA97uYWacL0ghxHTZ8p37iBVnbzrHpUwangqkSKVEcIPyti%2B850%2BvsjOHKOdwUhQ3OsRopBDXo7fr%2FklJZL60fK7o%2BU5AYSwIk4SUWudLJBF2LfksXKdwKpFjP1VjD65YvFk2Jz%2BtNO1jirxKLUw1RjLfrUd0zDgiOWhOpTSfVkGeh6wGDVjiTYJvEXEv%2FRKvZQs70%2FelnG4J2JYMoo44y%2B3LNnD9yRGRCcnk0JZzq9PiqHrtb26OJmvqvU0DzH8obFE0fwC61y6w8HcmLsYmmcLcr8S%2BdJqSlByAt%2F3QaBozcFP82ZA4lXVO0RdX8S6eOAajCFh53PzYyGlpXaXwPba%2Fs7LdNKL66g6k2SYHhEP51qsdkHJKoBquIO1bVEr6q3tWw%3D%3D",
					      "X-Powered-By" : "PHP/5.4.45-0+deb7u3",
					      "Content-Length" : "0"
				      },
				      "port" : 80,
				      "messageType" : "response"
			      }
		      }
	      ]
      },
      {
	      "issueDetail" : "The web server contains a robots.txt file.",
	      "url" : "http://yourdomain.com:80/robots.txt",
	      "name" : "Robots.txt file",
	      "port" : 80,
	      "messageType" : "scanIssue",
	      "severity" : "Information",
	      "confidence" : "Certain",
	      "protocol" : "http",
	      "issueType" : 6292992,
	      "requestResponses" : [
		      {
			      "request" : {
				      "url" : "http://yourdomain.com:80/robots.txt",
				      "referenceID" : 0,
				      "toolFlag" : 16962,
				      "headers" : {
					      "Connection" : "close",
					      "Host" : "foo.com"
				      },
				      "protocol" : "http",
				      "path" : "/robots.txt",
				      "port" : 80,
				      "messageType" : "request",
				      "method" : "GET",
				      "httpVersion" : "HTTP/1.1",
				      "body" : "",
				      "inScope" : false,
				      "raw" : "",
				      "host" : "foo.com"
			      },
			      "response" : {
				      "mimeType" : "text",
				      "toolFlag" : 16962,
				      "referenceID" : 0,
				      "headers" : {
					      "Last-Modified" : "Mon, 30 Mar 2015 11:03:02 GMT",
					      "Date" : "Wed, 08 Jun 2016 16:15:53 GMT",
					      "Content-Length" : "136",
					      "ETag" : "",
					      "Connection" : "close",
					      "Content-Type" : "text/plain; charset=UTF-8",
					      "Server" : "Apache",
					      "Accept-Ranges" : "bytes"
				      },
				      "cookies" : [],
				      "protocol" : "http",
				      "messageType" : "response",
				      "port" : 80,
				      "body" : "",
				      "statusCode" : 200,
				      "host" : "foo.com",
				      "inScope" : false,
				      "raw" : ""
			      },
			      "messageType" : "requestResponse"
		      }
	      ],
	      "remediationBackground" : "<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>",
	      "host" : "foo.com",
	      "inScope" : false,
	      "issueBackground" : "<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>\n<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>"
      }]
